#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FSP.Domain.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="fsp")]
	public partial class FSPDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAssist(Assist instance);
    partial void UpdateAssist(Assist instance);
    partial void DeleteAssist(Assist instance);
    partial void InsertWeblink(Weblink instance);
    partial void UpdateWeblink(Weblink instance);
    partial void DeleteWeblink(Weblink instance);
    partial void InsertBeatAlarm(BeatAlarm instance);
    partial void UpdateBeatAlarm(BeatAlarm instance);
    partial void DeleteBeatAlarm(BeatAlarm instance);
    partial void InsertBeatBeatSegment(BeatBeatSegment instance);
    partial void UpdateBeatBeatSegment(BeatBeatSegment instance);
    partial void DeleteBeatBeatSegment(BeatBeatSegment instance);
    partial void InsertBeatsFreeway(BeatsFreeway instance);
    partial void UpdateBeatsFreeway(BeatsFreeway instance);
    partial void DeleteBeatsFreeway(BeatsFreeway instance);
    partial void InsertCalendar(Calendar instance);
    partial void UpdateCalendar(Calendar instance);
    partial void DeleteCalendar(Calendar instance);
    partial void InsertDriverDailySchedule(DriverDailySchedule instance);
    partial void UpdateDriverDailySchedule(DriverDailySchedule instance);
    partial void DeleteDriverDailySchedule(DriverDailySchedule instance);
    partial void InsertDriverHistory(DriverHistory instance);
    partial void UpdateDriverHistory(DriverHistory instance);
    partial void DeleteDriverHistory(DriverHistory instance);
    partial void InsertFreeway(Freeway instance);
    partial void UpdateFreeway(Freeway instance);
    partial void DeleteFreeway(Freeway instance);
    partial void InsertIncident(Incident instance);
    partial void UpdateIncident(Incident instance);
    partial void DeleteIncident(Incident instance);
    partial void InsertIncidentType(IncidentType instance);
    partial void UpdateIncidentType(IncidentType instance);
    partial void DeleteIncidentType(IncidentType instance);
    partial void InsertInsuranceCarrier(InsuranceCarrier instance);
    partial void UpdateInsuranceCarrier(InsuranceCarrier instance);
    partial void DeleteInsuranceCarrier(InsuranceCarrier instance);
    partial void InsertInteractionType(InteractionType instance);
    partial void UpdateInteractionType(InteractionType instance);
    partial void DeleteInteractionType(InteractionType instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertServiceType(ServiceType instance);
    partial void UpdateServiceType(ServiceType instance);
    partial void DeleteServiceType(ServiceType instance);
    partial void InsertShiftSchedule(ShiftSchedule instance);
    partial void UpdateShiftSchedule(ShiftSchedule instance);
    partial void DeleteShiftSchedule(ShiftSchedule instance);
    partial void InsertTowLocation(TowLocation instance);
    partial void UpdateTowLocation(TowLocation instance);
    partial void DeleteTowLocation(TowLocation instance);
    partial void InsertTrafficSpeed(TrafficSpeed instance);
    partial void UpdateTrafficSpeed(TrafficSpeed instance);
    partial void DeleteTrafficSpeed(TrafficSpeed instance);
    partial void InsertVehiclePosition(VehiclePosition instance);
    partial void UpdateVehiclePosition(VehiclePosition instance);
    partial void DeleteVehiclePosition(VehiclePosition instance);
    partial void InsertVehicleType(VehicleType instance);
    partial void UpdateVehicleType(VehicleType instance);
    partial void DeleteVehicleType(VehicleType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertContractorInsurance(ContractorInsurance instance);
    partial void UpdateContractorInsurance(ContractorInsurance instance);
    partial void DeleteContractorInsurance(ContractorInsurance instance);
    partial void InsertInspectionType(InspectionType instance);
    partial void UpdateInspectionType(InspectionType instance);
    partial void DeleteInspectionType(InspectionType instance);
    partial void InsertCHPOfficer(CHPOfficer instance);
    partial void UpdateCHPOfficer(CHPOfficer instance);
    partial void DeleteCHPOfficer(CHPOfficer instance);
    partial void InsertCHPInspection(CHPInspection instance);
    partial void UpdateCHPInspection(CHPInspection instance);
    partial void DeleteCHPInspection(CHPInspection instance);
    partial void InsertContractorManager(ContractorManager instance);
    partial void UpdateContractorManager(ContractorManager instance);
    partial void DeleteContractorManager(ContractorManager instance);
    partial void InsertContractor(Contractor instance);
    partial void UpdateContractor(Contractor instance);
    partial void DeleteContractor(Contractor instance);
    partial void InsertvBeat(vBeat instance);
    partial void UpdatevBeat(vBeat instance);
    partial void DeletevBeat(vBeat instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertContractsBeat(ContractsBeat instance);
    partial void UpdateContractsBeat(ContractsBeat instance);
    partial void DeleteContractsBeat(ContractsBeat instance);
    partial void InsertContract(Contract instance);
    partial void UpdateContract(Contract instance);
    partial void DeleteContract(Contract instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertFleetVehicle(FleetVehicle instance);
    partial void UpdateFleetVehicle(FleetVehicle instance);
    partial void DeleteFleetVehicle(FleetVehicle instance);
    partial void InsertDriverInteraction(DriverInteraction instance);
    partial void UpdateDriverInteraction(DriverInteraction instance);
    partial void DeleteDriverInteraction(DriverInteraction instance);
    partial void InsertYearlyCalendar(YearlyCalendar instance);
    partial void UpdateYearlyCalendar(YearlyCalendar instance);
    partial void DeleteYearlyCalendar(YearlyCalendar instance);
    partial void InsertVar(Var instance);
    partial void UpdateVar(Var instance);
    partial void DeleteVar(Var instance);
    partial void InsertBeatBeatSchedule(BeatBeatSchedule instance);
    partial void UpdateBeatBeatSchedule(BeatBeatSchedule instance);
    partial void DeleteBeatBeatSchedule(BeatBeatSchedule instance);
    partial void InsertDailyBeatSchedule(DailyBeatSchedule instance);
    partial void UpdateDailyBeatSchedule(DailyBeatSchedule instance);
    partial void DeleteDailyBeatSchedule(DailyBeatSchedule instance);
    partial void InsertBeatSchedule(BeatSchedule instance);
    partial void UpdateBeatSchedule(BeatSchedule instance);
    partial void DeleteBeatSchedule(BeatSchedule instance);
    partial void InsertAEFrequency(AEFrequency instance);
    partial void UpdateAEFrequency(AEFrequency instance);
    partial void DeleteAEFrequency(AEFrequency instance);
    partial void InsertAERecipient(AERecipient instance);
    partial void UpdateAERecipient(AERecipient instance);
    partial void DeleteAERecipient(AERecipient instance);
    partial void InsertAEReport(AEReport instance);
    partial void UpdateAEReport(AEReport instance);
    partial void DeleteAEReport(AEReport instance);
    partial void InsertAEReportType(AEReportType instance);
    partial void UpdateAEReportType(AEReportType instance);
    partial void DeleteAEReportType(AEReportType instance);
    partial void InsertBeats_New(Beats_New instance);
    partial void UpdateBeats_New(Beats_New instance);
    partial void DeleteBeats_New(Beats_New instance);
    #endregion
		
		public FSPDataContext() : 
				base(global::FSP.Domain.Properties.Settings.Default.fspConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FSPDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FSPDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FSPDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FSPDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Assist> Assists
		{
			get
			{
				return this.GetTable<Assist>();
			}
		}
		
		public System.Data.Linq.Table<Weblink> Weblinks
		{
			get
			{
				return this.GetTable<Weblink>();
			}
		}
		
		public System.Data.Linq.Table<BeatAlarm> BeatAlarms
		{
			get
			{
				return this.GetTable<BeatAlarm>();
			}
		}
		
		public System.Data.Linq.Table<BeatBeatSegment> BeatBeatSegments
		{
			get
			{
				return this.GetTable<BeatBeatSegment>();
			}
		}
		
		public System.Data.Linq.Table<BeatsFreeway> BeatsFreeways
		{
			get
			{
				return this.GetTable<BeatsFreeway>();
			}
		}
		
		public System.Data.Linq.Table<Calendar> Calendars
		{
			get
			{
				return this.GetTable<Calendar>();
			}
		}
		
		public System.Data.Linq.Table<DriverDailySchedule> DriverDailySchedules
		{
			get
			{
				return this.GetTable<DriverDailySchedule>();
			}
		}
		
		public System.Data.Linq.Table<DriverHistory> DriverHistories
		{
			get
			{
				return this.GetTable<DriverHistory>();
			}
		}
		
		public System.Data.Linq.Table<Freeway> Freeways
		{
			get
			{
				return this.GetTable<Freeway>();
			}
		}
		
		public System.Data.Linq.Table<Incident> Incidents
		{
			get
			{
				return this.GetTable<Incident>();
			}
		}
		
		public System.Data.Linq.Table<IncidentType> IncidentTypes
		{
			get
			{
				return this.GetTable<IncidentType>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceCarrier> InsuranceCarriers
		{
			get
			{
				return this.GetTable<InsuranceCarrier>();
			}
		}
		
		public System.Data.Linq.Table<InteractionType> InteractionTypes
		{
			get
			{
				return this.GetTable<InteractionType>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<ServiceType> ServiceTypes
		{
			get
			{
				return this.GetTable<ServiceType>();
			}
		}
		
		public System.Data.Linq.Table<ShiftSchedule> ShiftSchedules
		{
			get
			{
				return this.GetTable<ShiftSchedule>();
			}
		}
		
		public System.Data.Linq.Table<TowLocation> TowLocations
		{
			get
			{
				return this.GetTable<TowLocation>();
			}
		}
		
		public System.Data.Linq.Table<TrafficSpeed> TrafficSpeeds
		{
			get
			{
				return this.GetTable<TrafficSpeed>();
			}
		}
		
		public System.Data.Linq.Table<VehiclePosition> VehiclePositions
		{
			get
			{
				return this.GetTable<VehiclePosition>();
			}
		}
		
		public System.Data.Linq.Table<VehicleType> VehicleTypes
		{
			get
			{
				return this.GetTable<VehicleType>();
			}
		}
		
		public System.Data.Linq.Table<vGPSTrackingLog> vGPSTrackingLogs
		{
			get
			{
				return this.GetTable<vGPSTrackingLog>();
			}
		}
		
		public System.Data.Linq.Table<vBeatSegment> vBeatSegments
		{
			get
			{
				return this.GetTable<vBeatSegment>();
			}
		}
		
		public System.Data.Linq.Table<vGPSTracking> vGPSTrackings
		{
			get
			{
				return this.GetTable<vGPSTracking>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<ContractorInsurance> ContractorInsurances
		{
			get
			{
				return this.GetTable<ContractorInsurance>();
			}
		}
		
		public System.Data.Linq.Table<InspectionType> InspectionTypes
		{
			get
			{
				return this.GetTable<InspectionType>();
			}
		}
		
		public System.Data.Linq.Table<CHPOfficer> CHPOfficers
		{
			get
			{
				return this.GetTable<CHPOfficer>();
			}
		}
		
		public System.Data.Linq.Table<CHPInspection> CHPInspections
		{
			get
			{
				return this.GetTable<CHPInspection>();
			}
		}
		
		public System.Data.Linq.Table<vCallBox> vCallBoxes
		{
			get
			{
				return this.GetTable<vCallBox>();
			}
		}
		
		public System.Data.Linq.Table<ContractorManager> ContractorManagers
		{
			get
			{
				return this.GetTable<ContractorManager>();
			}
		}
		
		public System.Data.Linq.Table<Contractor> Contractors
		{
			get
			{
				return this.GetTable<Contractor>();
			}
		}
		
		public System.Data.Linq.Table<vBeat> vBeats
		{
			get
			{
				return this.GetTable<vBeat>();
			}
		}
		
		public System.Data.Linq.Table<vDropZone> vDropZones
		{
			get
			{
				return this.GetTable<vDropZone>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<TruckState> TruckStates
		{
			get
			{
				return this.GetTable<TruckState>();
			}
		}
		
		public System.Data.Linq.Table<ContractsBeat> ContractsBeats
		{
			get
			{
				return this.GetTable<ContractsBeat>();
			}
		}
		
		public System.Data.Linq.Table<Contract> Contracts
		{
			get
			{
				return this.GetTable<Contract>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<FleetVehicle> FleetVehicles
		{
			get
			{
				return this.GetTable<FleetVehicle>();
			}
		}
		
		public System.Data.Linq.Table<DriverInteraction> DriverInteractions
		{
			get
			{
				return this.GetTable<DriverInteraction>();
			}
		}
		
		public System.Data.Linq.Table<YearlyCalendar> YearlyCalendars
		{
			get
			{
				return this.GetTable<YearlyCalendar>();
			}
		}
		
		public System.Data.Linq.Table<Var> Vars
		{
			get
			{
				return this.GetTable<Var>();
			}
		}
		
		public System.Data.Linq.Table<BeatBeatSchedule> BeatBeatSchedules
		{
			get
			{
				return this.GetTable<BeatBeatSchedule>();
			}
		}
		
		public System.Data.Linq.Table<DailyBeatSchedule> DailyBeatSchedules
		{
			get
			{
				return this.GetTable<DailyBeatSchedule>();
			}
		}
		
		public System.Data.Linq.Table<BeatSchedule> BeatSchedules
		{
			get
			{
				return this.GetTable<BeatSchedule>();
			}
		}
		
		public System.Data.Linq.Table<AEFrequency> AEFrequencies
		{
			get
			{
				return this.GetTable<AEFrequency>();
			}
		}
		
		public System.Data.Linq.Table<AERecipient> AERecipients
		{
			get
			{
				return this.GetTable<AERecipient>();
			}
		}
		
		public System.Data.Linq.Table<AEReport> AEReports
		{
			get
			{
				return this.GetTable<AEReport>();
			}
		}
		
		public System.Data.Linq.Table<AEReportType> AEReportTypes
		{
			get
			{
				return this.GetTable<AEReportType>();
			}
		}
		
		public System.Data.Linq.Table<Beats_New> Beats_News
		{
			get
			{
				return this.GetTable<Beats_New>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDailySchedules")]
		public ISingleResult<GetDailySchedulesResult> GetDailySchedules()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetDailySchedulesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAlarmHistory", IsComposable=true)]
		public object GetAlarmHistory([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartTime", DbType="DateTime")] System.Nullable<System.DateTime> startTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndTime", DbType="DateTime")] System.Nullable<System.DateTime> endTime)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startTime, endTime).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateExcuse")]
		public int UpdateExcuse([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StartTime", DbType="DateTime")] System.Nullable<System.DateTime> startTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndTime", DbType="DateTime")] System.Nullable<System.DateTime> endTime, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AlarmType", DbType="VarChar(50)")] string alarmType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VehicleID", DbType="VarChar(50)")] string vehicleID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Comment", DbType="VarChar(500)")] string comment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverName", DbType="VarChar(100)")] string driverName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ExcuseTime", DbType="DateTime")] System.Nullable<System.DateTime> excuseTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startTime, endTime, alarmType, vehicleID, comment, driverName, excuseTime);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetEarlyRollInReport")]
		public ISingleResult<GetEarlyRollInReportResult> GetEarlyRollInReport([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DateStart", DbType="DateTime")] System.Nullable<System.DateTime> dateStart, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DateEnd", DbType="DateTime")] System.Nullable<System.DateTime> dateEnd, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BeatNumber", DbType="VarChar(20)")] string beatNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverLastName", DbType="VarChar(20)")] string driverLastName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverFirstName", DbType="VarChar(20)")] string driverFirstName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ContractorID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> contractorID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dateStart, dateEnd, beatNumber, driverLastName, driverFirstName, contractorID);
			return ((ISingleResult<GetEarlyRollInReportResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assists")]
	public partial class Assist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AssistID;
		
		private string _AssistType;
		
		private System.Guid _IncidentID;
		
		private System.Nullable<System.Guid> _ServiceTypeID;
		
		private System.Nullable<System.Guid> _DropZoneID;
		
		private string _Make;
		
		private System.Guid _VehicleTypeID;
		
		private string _Color;
		
		private string _LicensePlate;
		
		private string _State;
		
		private int _StartOD;
		
		private int _EndOD;
		
		private System.Guid _TowLocationID;
		
		private int _Tip;
		
		private string _TipDetail;
		
		private string _CustomerLastName;
		
		private string _Comments;
		
		private bool _IsMDC;
		
		private System.DateTime @__1097;
		
		private System.Nullable<System.DateTime> @__1098;
		
		private System.Guid _ContractorID;
		
		private string _LogNumber;
		
		private System.Guid _BeatSegmentID;
		
		private EntityRef<ServiceType> _ServiceType;
		
		private EntityRef<TowLocation> _TowLocation;
		
		private EntityRef<VehicleType> _VehicleType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAssistIDChanging(System.Guid value);
    partial void OnAssistIDChanged();
    partial void OnAssistTypeChanging(string value);
    partial void OnAssistTypeChanged();
    partial void OnIncidentIDChanging(System.Guid value);
    partial void OnIncidentIDChanged();
    partial void OnServiceTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnServiceTypeIDChanged();
    partial void OnDropZoneIDChanging(System.Nullable<System.Guid> value);
    partial void OnDropZoneIDChanged();
    partial void OnMakeChanging(string value);
    partial void OnMakeChanged();
    partial void OnVehicleTypeIDChanging(System.Guid value);
    partial void OnVehicleTypeIDChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnLicensePlateChanging(string value);
    partial void OnLicensePlateChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnStartODChanging(int value);
    partial void OnStartODChanged();
    partial void OnEndODChanging(int value);
    partial void OnEndODChanged();
    partial void OnTowLocationIDChanging(System.Guid value);
    partial void OnTowLocationIDChanged();
    partial void OnTipChanging(int value);
    partial void OnTipChanged();
    partial void OnTipDetailChanging(string value);
    partial void OnTipDetailChanged();
    partial void OnCustomerLastNameChanging(string value);
    partial void OnCustomerLastNameChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnIsMDCChanging(bool value);
    partial void OnIsMDCChanged();
    partial void On_1097Changing(System.DateTime value);
    partial void On_1097Changed();
    partial void On_1098Changing(System.Nullable<System.DateTime> value);
    partial void On_1098Changed();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    partial void OnLogNumberChanging(string value);
    partial void OnLogNumberChanged();
    partial void OnBeatSegmentIDChanging(System.Guid value);
    partial void OnBeatSegmentIDChanged();
    #endregion
		
		public Assist()
		{
			this._ServiceType = default(EntityRef<ServiceType>);
			this._TowLocation = default(EntityRef<TowLocation>);
			this._VehicleType = default(EntityRef<VehicleType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssistID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AssistID
		{
			get
			{
				return this._AssistID;
			}
			set
			{
				if ((this._AssistID != value))
				{
					this.OnAssistIDChanging(value);
					this.SendPropertyChanging();
					this._AssistID = value;
					this.SendPropertyChanged("AssistID");
					this.OnAssistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssistType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AssistType
		{
			get
			{
				return this._AssistType;
			}
			set
			{
				if ((this._AssistType != value))
				{
					this.OnAssistTypeChanging(value);
					this.SendPropertyChanging();
					this._AssistType = value;
					this.SendPropertyChanged("AssistType");
					this.OnAssistTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IncidentID
		{
			get
			{
				return this._IncidentID;
			}
			set
			{
				if ((this._IncidentID != value))
				{
					this.OnIncidentIDChanging(value);
					this.SendPropertyChanging();
					this._IncidentID = value;
					this.SendPropertyChanged("IncidentID");
					this.OnIncidentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ServiceTypeID
		{
			get
			{
				return this._ServiceTypeID;
			}
			set
			{
				if ((this._ServiceTypeID != value))
				{
					if (this._ServiceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeID = value;
					this.SendPropertyChanged("ServiceTypeID");
					this.OnServiceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DropZoneID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DropZoneID
		{
			get
			{
				return this._DropZoneID;
			}
			set
			{
				if ((this._DropZoneID != value))
				{
					this.OnDropZoneIDChanging(value);
					this.SendPropertyChanging();
					this._DropZoneID = value;
					this.SendPropertyChanged("DropZoneID");
					this.OnDropZoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Make", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Make
		{
			get
			{
				return this._Make;
			}
			set
			{
				if ((this._Make != value))
				{
					this.OnMakeChanging(value);
					this.SendPropertyChanging();
					this._Make = value;
					this.SendPropertyChanged("Make");
					this.OnMakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid VehicleTypeID
		{
			get
			{
				return this._VehicleTypeID;
			}
			set
			{
				if ((this._VehicleTypeID != value))
				{
					if (this._VehicleType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehicleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeID = value;
					this.SendPropertyChanged("VehicleTypeID");
					this.OnVehicleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensePlate", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LicensePlate
		{
			get
			{
				return this._LicensePlate;
			}
			set
			{
				if ((this._LicensePlate != value))
				{
					this.OnLicensePlateChanging(value);
					this.SendPropertyChanging();
					this._LicensePlate = value;
					this.SendPropertyChanged("LicensePlate");
					this.OnLicensePlateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartOD", DbType="Int NOT NULL")]
		public int StartOD
		{
			get
			{
				return this._StartOD;
			}
			set
			{
				if ((this._StartOD != value))
				{
					this.OnStartODChanging(value);
					this.SendPropertyChanging();
					this._StartOD = value;
					this.SendPropertyChanged("StartOD");
					this.OnStartODChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndOD", DbType="Int NOT NULL")]
		public int EndOD
		{
			get
			{
				return this._EndOD;
			}
			set
			{
				if ((this._EndOD != value))
				{
					this.OnEndODChanging(value);
					this.SendPropertyChanging();
					this._EndOD = value;
					this.SendPropertyChanged("EndOD");
					this.OnEndODChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TowLocationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TowLocationID
		{
			get
			{
				return this._TowLocationID;
			}
			set
			{
				if ((this._TowLocationID != value))
				{
					if (this._TowLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTowLocationIDChanging(value);
					this.SendPropertyChanging();
					this._TowLocationID = value;
					this.SendPropertyChanged("TowLocationID");
					this.OnTowLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tip", DbType="Int NOT NULL")]
		public int Tip
		{
			get
			{
				return this._Tip;
			}
			set
			{
				if ((this._Tip != value))
				{
					this.OnTipChanging(value);
					this.SendPropertyChanging();
					this._Tip = value;
					this.SendPropertyChanged("Tip");
					this.OnTipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TipDetail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TipDetail
		{
			get
			{
				return this._TipDetail;
			}
			set
			{
				if ((this._TipDetail != value))
				{
					this.OnTipDetailChanging(value);
					this.SendPropertyChanging();
					this._TipDetail = value;
					this.SendPropertyChanged("TipDetail");
					this.OnTipDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerLastName
		{
			get
			{
				return this._CustomerLastName;
			}
			set
			{
				if ((this._CustomerLastName != value))
				{
					this.OnCustomerLastNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerLastName = value;
					this.SendPropertyChanged("CustomerLastName");
					this.OnCustomerLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMDC", DbType="Bit NOT NULL")]
		public bool IsMDC
		{
			get
			{
				return this._IsMDC;
			}
			set
			{
				if ((this._IsMDC != value))
				{
					this.OnIsMDCChanging(value);
					this.SendPropertyChanging();
					this._IsMDC = value;
					this.SendPropertyChanged("IsMDC");
					this.OnIsMDCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[1097]", Storage="__1097", DbType="DateTime NOT NULL")]
		public System.DateTime _1097
		{
			get
			{
				return this.@__1097;
			}
			set
			{
				if ((this.@__1097 != value))
				{
					this.On_1097Changing(value);
					this.SendPropertyChanging();
					this.@__1097 = value;
					this.SendPropertyChanged("_1097");
					this.On_1097Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[1098]", Storage="__1098", DbType="DateTime")]
		public System.Nullable<System.DateTime> _1098
		{
			get
			{
				return this.@__1098;
			}
			set
			{
				if ((this.@__1098 != value))
				{
					this.On_1098Changing(value);
					this.SendPropertyChanging();
					this.@__1098 = value;
					this.SendPropertyChanged("_1098");
					this.On_1098Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogNumber", DbType="VarChar(50)")]
		public string LogNumber
		{
			get
			{
				return this._LogNumber;
			}
			set
			{
				if ((this._LogNumber != value))
				{
					this.OnLogNumberChanging(value);
					this.SendPropertyChanging();
					this._LogNumber = value;
					this.SendPropertyChanged("LogNumber");
					this.OnLogNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatSegmentID
		{
			get
			{
				return this._BeatSegmentID;
			}
			set
			{
				if ((this._BeatSegmentID != value))
				{
					this.OnBeatSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._BeatSegmentID = value;
					this.SendPropertyChanged("BeatSegmentID");
					this.OnBeatSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceType_Assist", Storage="_ServiceType", ThisKey="ServiceTypeID", OtherKey="ServiceTypeID", IsForeignKey=true)]
		public ServiceType ServiceType
		{
			get
			{
				return this._ServiceType.Entity;
			}
			set
			{
				ServiceType previousValue = this._ServiceType.Entity;
				if (((previousValue != value) 
							|| (this._ServiceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceType.Entity = null;
						previousValue.Assists.Remove(this);
					}
					this._ServiceType.Entity = value;
					if ((value != null))
					{
						value.Assists.Add(this);
						this._ServiceTypeID = value.ServiceTypeID;
					}
					else
					{
						this._ServiceTypeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ServiceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TowLocation_Assist", Storage="_TowLocation", ThisKey="TowLocationID", OtherKey="TowLocationID", IsForeignKey=true)]
		public TowLocation TowLocation
		{
			get
			{
				return this._TowLocation.Entity;
			}
			set
			{
				TowLocation previousValue = this._TowLocation.Entity;
				if (((previousValue != value) 
							|| (this._TowLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TowLocation.Entity = null;
						previousValue.Assists.Remove(this);
					}
					this._TowLocation.Entity = value;
					if ((value != null))
					{
						value.Assists.Add(this);
						this._TowLocationID = value.TowLocationID;
					}
					else
					{
						this._TowLocationID = default(System.Guid);
					}
					this.SendPropertyChanged("TowLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleType_Assist", Storage="_VehicleType", ThisKey="VehicleTypeID", OtherKey="VehicleTypeID", IsForeignKey=true)]
		public VehicleType VehicleType
		{
			get
			{
				return this._VehicleType.Entity;
			}
			set
			{
				VehicleType previousValue = this._VehicleType.Entity;
				if (((previousValue != value) 
							|| (this._VehicleType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehicleType.Entity = null;
						previousValue.Assists.Remove(this);
					}
					this._VehicleType.Entity = value;
					if ((value != null))
					{
						value.Assists.Add(this);
						this._VehicleTypeID = value.VehicleTypeID;
					}
					else
					{
						this._VehicleTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("VehicleType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Weblinks")]
	public partial class Weblink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WeblinkID;
		
		private string _URL;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWeblinkIDChanging(System.Guid value);
    partial void OnWeblinkIDChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Weblink()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeblinkID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WeblinkID
		{
			get
			{
				return this._WeblinkID;
			}
			set
			{
				if ((this._WeblinkID != value))
				{
					this.OnWeblinkIDChanging(value);
					this.SendPropertyChanging();
					this._WeblinkID = value;
					this.SendPropertyChanged("WeblinkID");
					this.OnWeblinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeatAlarms")]
	public partial class BeatAlarm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BeatAlarmsID;
		
		private System.Guid _BeatID;
		
		private System.Guid _BeatScheduleID;
		
		private int _MaxDistanceFromBeat;
		
		private int _MaxTimeOffBeat;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeatAlarmsIDChanging(System.Guid value);
    partial void OnBeatAlarmsIDChanged();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    partial void OnBeatScheduleIDChanging(System.Guid value);
    partial void OnBeatScheduleIDChanged();
    partial void OnMaxDistanceFromBeatChanging(int value);
    partial void OnMaxDistanceFromBeatChanged();
    partial void OnMaxTimeOffBeatChanging(int value);
    partial void OnMaxTimeOffBeatChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public BeatAlarm()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatAlarmsID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatAlarmsID
		{
			get
			{
				return this._BeatAlarmsID;
			}
			set
			{
				if ((this._BeatAlarmsID != value))
				{
					this.OnBeatAlarmsIDChanging(value);
					this.SendPropertyChanging();
					this._BeatAlarmsID = value;
					this.SendPropertyChanged("BeatAlarmsID");
					this.OnBeatAlarmsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatScheduleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatScheduleID
		{
			get
			{
				return this._BeatScheduleID;
			}
			set
			{
				if ((this._BeatScheduleID != value))
				{
					this.OnBeatScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._BeatScheduleID = value;
					this.SendPropertyChanged("BeatScheduleID");
					this.OnBeatScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxDistanceFromBeat", DbType="Int NOT NULL")]
		public int MaxDistanceFromBeat
		{
			get
			{
				return this._MaxDistanceFromBeat;
			}
			set
			{
				if ((this._MaxDistanceFromBeat != value))
				{
					this.OnMaxDistanceFromBeatChanging(value);
					this.SendPropertyChanging();
					this._MaxDistanceFromBeat = value;
					this.SendPropertyChanged("MaxDistanceFromBeat");
					this.OnMaxDistanceFromBeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxTimeOffBeat", DbType="Int NOT NULL")]
		public int MaxTimeOffBeat
		{
			get
			{
				return this._MaxTimeOffBeat;
			}
			set
			{
				if ((this._MaxTimeOffBeat != value))
				{
					this.OnMaxTimeOffBeatChanging(value);
					this.SendPropertyChanging();
					this._MaxTimeOffBeat = value;
					this.SendPropertyChanged("MaxTimeOffBeat");
					this.OnMaxTimeOffBeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeatBeatSegments")]
	public partial class BeatBeatSegment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BeatBeatSegmentID;
		
		private System.Guid _BeatID;
		
		private System.Guid _BeatSegmentID;
		
		private System.Nullable<bool> _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeatBeatSegmentIDChanging(System.Guid value);
    partial void OnBeatBeatSegmentIDChanged();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    partial void OnBeatSegmentIDChanging(System.Guid value);
    partial void OnBeatSegmentIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public BeatBeatSegment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatBeatSegmentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatBeatSegmentID
		{
			get
			{
				return this._BeatBeatSegmentID;
			}
			set
			{
				if ((this._BeatBeatSegmentID != value))
				{
					this.OnBeatBeatSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._BeatBeatSegmentID = value;
					this.SendPropertyChanged("BeatBeatSegmentID");
					this.OnBeatBeatSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatSegmentID
		{
			get
			{
				return this._BeatSegmentID;
			}
			set
			{
				if ((this._BeatSegmentID != value))
				{
					this.OnBeatSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._BeatSegmentID = value;
					this.SendPropertyChanged("BeatSegmentID");
					this.OnBeatSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeatsFreeways")]
	public partial class BeatsFreeway : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BeatFreewayID;
		
		private System.Guid _BeatID;
		
		private int _FreewayID;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.DateTime _EndDate;
		
		private EntityRef<Freeway> _Freeway;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeatFreewayIDChanging(System.Guid value);
    partial void OnBeatFreewayIDChanged();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    partial void OnFreewayIDChanging(int value);
    partial void OnFreewayIDChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    #endregion
		
		public BeatsFreeway()
		{
			this._Freeway = default(EntityRef<Freeway>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatFreewayID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatFreewayID
		{
			get
			{
				return this._BeatFreewayID;
			}
			set
			{
				if ((this._BeatFreewayID != value))
				{
					this.OnBeatFreewayIDChanging(value);
					this.SendPropertyChanging();
					this._BeatFreewayID = value;
					this.SendPropertyChanged("BeatFreewayID");
					this.OnBeatFreewayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreewayID", DbType="Int NOT NULL")]
		public int FreewayID
		{
			get
			{
				return this._FreewayID;
			}
			set
			{
				if ((this._FreewayID != value))
				{
					if (this._Freeway.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFreewayIDChanging(value);
					this.SendPropertyChanging();
					this._FreewayID = value;
					this.SendPropertyChanged("FreewayID");
					this.OnFreewayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Freeway_BeatsFreeway", Storage="_Freeway", ThisKey="FreewayID", OtherKey="FreewayID", IsForeignKey=true)]
		public Freeway Freeway
		{
			get
			{
				return this._Freeway.Entity;
			}
			set
			{
				Freeway previousValue = this._Freeway.Entity;
				if (((previousValue != value) 
							|| (this._Freeway.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Freeway.Entity = null;
						previousValue.BeatsFreeways.Remove(this);
					}
					this._Freeway.Entity = value;
					if ((value != null))
					{
						value.BeatsFreeways.Add(this);
						this._FreewayID = value.FreewayID;
					}
					else
					{
						this._FreewayID = default(int);
					}
					this.SendPropertyChanged("Freeway");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Calendars")]
	public partial class Calendar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CalendarID;
		
		private string _CalendarName;
		
		private System.DateTime _CalendarDate;
		
		private System.Guid _BeatScheduleID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCalendarIDChanging(System.Guid value);
    partial void OnCalendarIDChanged();
    partial void OnCalendarNameChanging(string value);
    partial void OnCalendarNameChanged();
    partial void OnCalendarDateChanging(System.DateTime value);
    partial void OnCalendarDateChanged();
    partial void OnBeatScheduleIDChanging(System.Guid value);
    partial void OnBeatScheduleIDChanged();
    #endregion
		
		public Calendar()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalendarID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CalendarID
		{
			get
			{
				return this._CalendarID;
			}
			set
			{
				if ((this._CalendarID != value))
				{
					this.OnCalendarIDChanging(value);
					this.SendPropertyChanging();
					this._CalendarID = value;
					this.SendPropertyChanged("CalendarID");
					this.OnCalendarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalendarName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CalendarName
		{
			get
			{
				return this._CalendarName;
			}
			set
			{
				if ((this._CalendarName != value))
				{
					this.OnCalendarNameChanging(value);
					this.SendPropertyChanging();
					this._CalendarName = value;
					this.SendPropertyChanged("CalendarName");
					this.OnCalendarNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalendarDate", DbType="Date NOT NULL")]
		public System.DateTime CalendarDate
		{
			get
			{
				return this._CalendarDate;
			}
			set
			{
				if ((this._CalendarDate != value))
				{
					this.OnCalendarDateChanging(value);
					this.SendPropertyChanging();
					this._CalendarDate = value;
					this.SendPropertyChanged("CalendarDate");
					this.OnCalendarDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatScheduleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatScheduleID
		{
			get
			{
				return this._BeatScheduleID;
			}
			set
			{
				if ((this._BeatScheduleID != value))
				{
					this.OnBeatScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._BeatScheduleID = value;
					this.SendPropertyChanged("BeatScheduleID");
					this.OnBeatScheduleIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverDailySchedule")]
	public partial class DriverDailySchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DriverID;
		
		private System.Guid _BeatScheduleID;
		
		private EntityRef<Driver> _Driver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverIDChanging(System.Guid value);
    partial void OnDriverIDChanged();
    partial void OnBeatScheduleIDChanging(System.Guid value);
    partial void OnBeatScheduleIDChanged();
    #endregion
		
		public DriverDailySchedule()
		{
			this._Driver = default(EntityRef<Driver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatScheduleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatScheduleID
		{
			get
			{
				return this._BeatScheduleID;
			}
			set
			{
				if ((this._BeatScheduleID != value))
				{
					this.OnBeatScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._BeatScheduleID = value;
					this.SendPropertyChanged("BeatScheduleID");
					this.OnBeatScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DriverDailySchedule", Storage="_Driver", ThisKey="DriverID", OtherKey="DriverID", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.DriverDailySchedules.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.DriverDailySchedules.Add(this);
						this._DriverID = value.DriverID;
					}
					else
					{
						this._DriverID = default(System.Guid);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverHistory")]
	public partial class DriverHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DriverID;
		
		private System.DateTime _TimeStamp;
		
		private System.Guid _ContractorID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _FSPIDNumber;
		
		private System.DateTime _ProgramStartDate;
		
		private System.Nullable<System.DateTime> _TrainingCompletionDate;
		
		private System.DateTime _DOB;
		
		private string _LicenseNumber;
		
		private System.DateTime _LicenseExpirationDate;
		
		private System.DateTime _DL64ExpirationDate;
		
		private System.DateTime _MedicalCardExpirationDate;
		
		private System.Nullable<System.DateTime> _LassPullNoticeDate;
		
		private System.DateTime _DateAdded;
		
		private string _UDF;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _ContractorEndDate;
		
		private System.Nullable<System.DateTime> _ProgramEndDate;
		
		private System.Guid _ScheduleID;
		
		private System.Nullable<System.DateTime> _DriverStartDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverIDChanging(System.Guid value);
    partial void OnDriverIDChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnFSPIDNumberChanging(string value);
    partial void OnFSPIDNumberChanged();
    partial void OnProgramStartDateChanging(System.DateTime value);
    partial void OnProgramStartDateChanged();
    partial void OnTrainingCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTrainingCompletionDateChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnLicenseNumberChanging(string value);
    partial void OnLicenseNumberChanged();
    partial void OnLicenseExpirationDateChanging(System.DateTime value);
    partial void OnLicenseExpirationDateChanged();
    partial void OnDL64ExpirationDateChanging(System.DateTime value);
    partial void OnDL64ExpirationDateChanged();
    partial void OnMedicalCardExpirationDateChanging(System.DateTime value);
    partial void OnMedicalCardExpirationDateChanged();
    partial void OnLassPullNoticeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLassPullNoticeDateChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnUDFChanging(string value);
    partial void OnUDFChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnContractorEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractorEndDateChanged();
    partial void OnProgramEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProgramEndDateChanged();
    partial void OnScheduleIDChanging(System.Guid value);
    partial void OnScheduleIDChanged();
    partial void OnDriverStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDriverStartDateChanged();
    #endregion
		
		public DriverHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSPIDNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FSPIDNumber
		{
			get
			{
				return this._FSPIDNumber;
			}
			set
			{
				if ((this._FSPIDNumber != value))
				{
					this.OnFSPIDNumberChanging(value);
					this.SendPropertyChanging();
					this._FSPIDNumber = value;
					this.SendPropertyChanged("FSPIDNumber");
					this.OnFSPIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramStartDate", DbType="Date NOT NULL")]
		public System.DateTime ProgramStartDate
		{
			get
			{
				return this._ProgramStartDate;
			}
			set
			{
				if ((this._ProgramStartDate != value))
				{
					this.OnProgramStartDateChanging(value);
					this.SendPropertyChanging();
					this._ProgramStartDate = value;
					this.SendPropertyChanged("ProgramStartDate");
					this.OnProgramStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCompletionDate", DbType="Date")]
		public System.Nullable<System.DateTime> TrainingCompletionDate
		{
			get
			{
				return this._TrainingCompletionDate;
			}
			set
			{
				if ((this._TrainingCompletionDate != value))
				{
					this.OnTrainingCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._TrainingCompletionDate = value;
					this.SendPropertyChanged("TrainingCompletionDate");
					this.OnTrainingCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LicenseNumber
		{
			get
			{
				return this._LicenseNumber;
			}
			set
			{
				if ((this._LicenseNumber != value))
				{
					this.OnLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._LicenseNumber = value;
					this.SendPropertyChanged("LicenseNumber");
					this.OnLicenseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime LicenseExpirationDate
		{
			get
			{
				return this._LicenseExpirationDate;
			}
			set
			{
				if ((this._LicenseExpirationDate != value))
				{
					this.OnLicenseExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._LicenseExpirationDate = value;
					this.SendPropertyChanged("LicenseExpirationDate");
					this.OnLicenseExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DL64ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime DL64ExpirationDate
		{
			get
			{
				return this._DL64ExpirationDate;
			}
			set
			{
				if ((this._DL64ExpirationDate != value))
				{
					this.OnDL64ExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._DL64ExpirationDate = value;
					this.SendPropertyChanged("DL64ExpirationDate");
					this.OnDL64ExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalCardExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime MedicalCardExpirationDate
		{
			get
			{
				return this._MedicalCardExpirationDate;
			}
			set
			{
				if ((this._MedicalCardExpirationDate != value))
				{
					this.OnMedicalCardExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._MedicalCardExpirationDate = value;
					this.SendPropertyChanged("MedicalCardExpirationDate");
					this.OnMedicalCardExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LassPullNoticeDate", DbType="Date")]
		public System.Nullable<System.DateTime> LassPullNoticeDate
		{
			get
			{
				return this._LassPullNoticeDate;
			}
			set
			{
				if ((this._LassPullNoticeDate != value))
				{
					this.OnLassPullNoticeDateChanging(value);
					this.SendPropertyChanging();
					this._LassPullNoticeDate = value;
					this.SendPropertyChanged("LassPullNoticeDate");
					this.OnLassPullNoticeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="Date NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDF", DbType="VarChar(500)")]
		public string UDF
		{
			get
			{
				return this._UDF;
			}
			set
			{
				if ((this._UDF != value))
				{
					this.OnUDFChanging(value);
					this.SendPropertyChanging();
					this._UDF = value;
					this.SendPropertyChanged("UDF");
					this.OnUDFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> ContractorEndDate
		{
			get
			{
				return this._ContractorEndDate;
			}
			set
			{
				if ((this._ContractorEndDate != value))
				{
					this.OnContractorEndDateChanging(value);
					this.SendPropertyChanging();
					this._ContractorEndDate = value;
					this.SendPropertyChanged("ContractorEndDate");
					this.OnContractorEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> ProgramEndDate
		{
			get
			{
				return this._ProgramEndDate;
			}
			set
			{
				if ((this._ProgramEndDate != value))
				{
					this.OnProgramEndDateChanging(value);
					this.SendPropertyChanging();
					this._ProgramEndDate = value;
					this.SendPropertyChanged("ProgramEndDate");
					this.OnProgramEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ScheduleID
		{
			get
			{
				return this._ScheduleID;
			}
			set
			{
				if ((this._ScheduleID != value))
				{
					this.OnScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleID = value;
					this.SendPropertyChanged("ScheduleID");
					this.OnScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverStartDate", DbType="Date")]
		public System.Nullable<System.DateTime> DriverStartDate
		{
			get
			{
				return this._DriverStartDate;
			}
			set
			{
				if ((this._DriverStartDate != value))
				{
					this.OnDriverStartDateChanging(value);
					this.SendPropertyChanging();
					this._DriverStartDate = value;
					this.SendPropertyChanged("DriverStartDate");
					this.OnDriverStartDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Freeways")]
	public partial class Freeway : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FreewayID;
		
		private string _FreewayName;
		
		private EntitySet<BeatsFreeway> _BeatsFreeways;
		
		private EntitySet<Incident> _Incidents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFreewayIDChanging(int value);
    partial void OnFreewayIDChanged();
    partial void OnFreewayNameChanging(string value);
    partial void OnFreewayNameChanged();
    #endregion
		
		public Freeway()
		{
			this._BeatsFreeways = new EntitySet<BeatsFreeway>(new Action<BeatsFreeway>(this.attach_BeatsFreeways), new Action<BeatsFreeway>(this.detach_BeatsFreeways));
			this._Incidents = new EntitySet<Incident>(new Action<Incident>(this.attach_Incidents), new Action<Incident>(this.detach_Incidents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreewayID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FreewayID
		{
			get
			{
				return this._FreewayID;
			}
			set
			{
				if ((this._FreewayID != value))
				{
					this.OnFreewayIDChanging(value);
					this.SendPropertyChanging();
					this._FreewayID = value;
					this.SendPropertyChanged("FreewayID");
					this.OnFreewayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreewayName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FreewayName
		{
			get
			{
				return this._FreewayName;
			}
			set
			{
				if ((this._FreewayName != value))
				{
					this.OnFreewayNameChanging(value);
					this.SendPropertyChanging();
					this._FreewayName = value;
					this.SendPropertyChanged("FreewayName");
					this.OnFreewayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Freeway_BeatsFreeway", Storage="_BeatsFreeways", ThisKey="FreewayID", OtherKey="FreewayID")]
		public EntitySet<BeatsFreeway> BeatsFreeways
		{
			get
			{
				return this._BeatsFreeways;
			}
			set
			{
				this._BeatsFreeways.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Freeway_Incident", Storage="_Incidents", ThisKey="FreewayID", OtherKey="FreewayID")]
		public EntitySet<Incident> Incidents
		{
			get
			{
				return this._Incidents;
			}
			set
			{
				this._Incidents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BeatsFreeways(BeatsFreeway entity)
		{
			this.SendPropertyChanging();
			entity.Freeway = this;
		}
		
		private void detach_BeatsFreeways(BeatsFreeway entity)
		{
			this.SendPropertyChanging();
			entity.Freeway = null;
		}
		
		private void attach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.Freeway = this;
		}
		
		private void detach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.Freeway = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Incidents")]
	public partial class Incident : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IncidentID;
		
		private System.Guid _DriverID;
		
		private System.Guid _FleetVehicleID;
		
		private System.Guid _BeatSegmentID;
		
		private System.TimeSpan _TimeStamp;
		
		private System.DateTime _DateStamp;
		
		private string _Description;
		
		private string _IncidentNumber;
		
		private System.DateTime _DispatchTime;
		
		private int _CustomerWaitTime;
		
		private string _Direction;
		
		private System.Guid _VehiclePositionID;
		
		private System.Guid _LocationID;
		
		private System.Guid _IncidentTypeID;
		
		private System.Guid _TrafficSpeedID;
		
		private int _FreewayID;
		
		private EntityRef<Freeway> _Freeway;
		
		private EntityRef<IncidentType> _IncidentType;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<TrafficSpeed> _TrafficSpeed;
		
		private EntityRef<VehiclePosition> _VehiclePosition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncidentIDChanging(System.Guid value);
    partial void OnIncidentIDChanged();
    partial void OnDriverIDChanging(System.Guid value);
    partial void OnDriverIDChanged();
    partial void OnFleetVehicleIDChanging(System.Guid value);
    partial void OnFleetVehicleIDChanged();
    partial void OnBeatSegmentIDChanging(System.Guid value);
    partial void OnBeatSegmentIDChanged();
    partial void OnTimeStampChanging(System.TimeSpan value);
    partial void OnTimeStampChanged();
    partial void OnDateStampChanging(System.DateTime value);
    partial void OnDateStampChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIncidentNumberChanging(string value);
    partial void OnIncidentNumberChanged();
    partial void OnDispatchTimeChanging(System.DateTime value);
    partial void OnDispatchTimeChanged();
    partial void OnCustomerWaitTimeChanging(int value);
    partial void OnCustomerWaitTimeChanged();
    partial void OnDirectionChanging(string value);
    partial void OnDirectionChanged();
    partial void OnVehiclePositionIDChanging(System.Guid value);
    partial void OnVehiclePositionIDChanged();
    partial void OnLocationIDChanging(System.Guid value);
    partial void OnLocationIDChanged();
    partial void OnIncidentTypeIDChanging(System.Guid value);
    partial void OnIncidentTypeIDChanged();
    partial void OnTrafficSpeedIDChanging(System.Guid value);
    partial void OnTrafficSpeedIDChanged();
    partial void OnFreewayIDChanging(int value);
    partial void OnFreewayIDChanged();
    #endregion
		
		public Incident()
		{
			this._Freeway = default(EntityRef<Freeway>);
			this._IncidentType = default(EntityRef<IncidentType>);
			this._Location = default(EntityRef<Location>);
			this._TrafficSpeed = default(EntityRef<TrafficSpeed>);
			this._VehiclePosition = default(EntityRef<VehiclePosition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IncidentID
		{
			get
			{
				return this._IncidentID;
			}
			set
			{
				if ((this._IncidentID != value))
				{
					this.OnIncidentIDChanging(value);
					this.SendPropertyChanging();
					this._IncidentID = value;
					this.SendPropertyChanged("IncidentID");
					this.OnIncidentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetVehicleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FleetVehicleID
		{
			get
			{
				return this._FleetVehicleID;
			}
			set
			{
				if ((this._FleetVehicleID != value))
				{
					this.OnFleetVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._FleetVehicleID = value;
					this.SendPropertyChanged("FleetVehicleID");
					this.OnFleetVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatSegmentID
		{
			get
			{
				return this._BeatSegmentID;
			}
			set
			{
				if ((this._BeatSegmentID != value))
				{
					this.OnBeatSegmentIDChanging(value);
					this.SendPropertyChanging();
					this._BeatSegmentID = value;
					this.SendPropertyChanged("BeatSegmentID");
					this.OnBeatSegmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="Time NOT NULL")]
		public System.TimeSpan TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStamp", DbType="Date NOT NULL")]
		public System.DateTime DateStamp
		{
			get
			{
				return this._DateStamp;
			}
			set
			{
				if ((this._DateStamp != value))
				{
					this.OnDateStampChanging(value);
					this.SendPropertyChanging();
					this._DateStamp = value;
					this.SendPropertyChanged("DateStamp");
					this.OnDateStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IncidentNumber
		{
			get
			{
				return this._IncidentNumber;
			}
			set
			{
				if ((this._IncidentNumber != value))
				{
					this.OnIncidentNumberChanging(value);
					this.SendPropertyChanging();
					this._IncidentNumber = value;
					this.SendPropertyChanged("IncidentNumber");
					this.OnIncidentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DispatchTime", DbType="DateTime NOT NULL")]
		public System.DateTime DispatchTime
		{
			get
			{
				return this._DispatchTime;
			}
			set
			{
				if ((this._DispatchTime != value))
				{
					this.OnDispatchTimeChanging(value);
					this.SendPropertyChanging();
					this._DispatchTime = value;
					this.SendPropertyChanged("DispatchTime");
					this.OnDispatchTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerWaitTime", DbType="Int NOT NULL")]
		public int CustomerWaitTime
		{
			get
			{
				return this._CustomerWaitTime;
			}
			set
			{
				if ((this._CustomerWaitTime != value))
				{
					this.OnCustomerWaitTimeChanging(value);
					this.SendPropertyChanging();
					this._CustomerWaitTime = value;
					this.SendPropertyChanged("CustomerWaitTime");
					this.OnCustomerWaitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehiclePositionID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid VehiclePositionID
		{
			get
			{
				return this._VehiclePositionID;
			}
			set
			{
				if ((this._VehiclePositionID != value))
				{
					if (this._VehiclePosition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVehiclePositionIDChanging(value);
					this.SendPropertyChanging();
					this._VehiclePositionID = value;
					this.SendPropertyChanged("VehiclePositionID");
					this.OnVehiclePositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IncidentTypeID
		{
			get
			{
				return this._IncidentTypeID;
			}
			set
			{
				if ((this._IncidentTypeID != value))
				{
					if (this._IncidentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncidentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._IncidentTypeID = value;
					this.SendPropertyChanged("IncidentTypeID");
					this.OnIncidentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrafficSpeedID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TrafficSpeedID
		{
			get
			{
				return this._TrafficSpeedID;
			}
			set
			{
				if ((this._TrafficSpeedID != value))
				{
					if (this._TrafficSpeed.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrafficSpeedIDChanging(value);
					this.SendPropertyChanging();
					this._TrafficSpeedID = value;
					this.SendPropertyChanged("TrafficSpeedID");
					this.OnTrafficSpeedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreewayID", DbType="Int NOT NULL")]
		public int FreewayID
		{
			get
			{
				return this._FreewayID;
			}
			set
			{
				if ((this._FreewayID != value))
				{
					if (this._Freeway.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFreewayIDChanging(value);
					this.SendPropertyChanging();
					this._FreewayID = value;
					this.SendPropertyChanged("FreewayID");
					this.OnFreewayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Freeway_Incident", Storage="_Freeway", ThisKey="FreewayID", OtherKey="FreewayID", IsForeignKey=true)]
		public Freeway Freeway
		{
			get
			{
				return this._Freeway.Entity;
			}
			set
			{
				Freeway previousValue = this._Freeway.Entity;
				if (((previousValue != value) 
							|| (this._Freeway.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Freeway.Entity = null;
						previousValue.Incidents.Remove(this);
					}
					this._Freeway.Entity = value;
					if ((value != null))
					{
						value.Incidents.Add(this);
						this._FreewayID = value.FreewayID;
					}
					else
					{
						this._FreewayID = default(int);
					}
					this.SendPropertyChanged("Freeway");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IncidentType_Incident", Storage="_IncidentType", ThisKey="IncidentTypeID", OtherKey="IncidentTypeID", IsForeignKey=true)]
		public IncidentType IncidentType
		{
			get
			{
				return this._IncidentType.Entity;
			}
			set
			{
				IncidentType previousValue = this._IncidentType.Entity;
				if (((previousValue != value) 
							|| (this._IncidentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncidentType.Entity = null;
						previousValue.Incidents.Remove(this);
					}
					this._IncidentType.Entity = value;
					if ((value != null))
					{
						value.Incidents.Add(this);
						this._IncidentTypeID = value.IncidentTypeID;
					}
					else
					{
						this._IncidentTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("IncidentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Incident", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Incidents.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Incidents.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(System.Guid);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrafficSpeed_Incident", Storage="_TrafficSpeed", ThisKey="TrafficSpeedID", OtherKey="TrafficSpeedID", IsForeignKey=true)]
		public TrafficSpeed TrafficSpeed
		{
			get
			{
				return this._TrafficSpeed.Entity;
			}
			set
			{
				TrafficSpeed previousValue = this._TrafficSpeed.Entity;
				if (((previousValue != value) 
							|| (this._TrafficSpeed.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrafficSpeed.Entity = null;
						previousValue.Incidents.Remove(this);
					}
					this._TrafficSpeed.Entity = value;
					if ((value != null))
					{
						value.Incidents.Add(this);
						this._TrafficSpeedID = value.TrafficSpeedID;
					}
					else
					{
						this._TrafficSpeedID = default(System.Guid);
					}
					this.SendPropertyChanged("TrafficSpeed");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehiclePosition_Incident", Storage="_VehiclePosition", ThisKey="VehiclePositionID", OtherKey="VehiclePositionID", IsForeignKey=true)]
		public VehiclePosition VehiclePosition
		{
			get
			{
				return this._VehiclePosition.Entity;
			}
			set
			{
				VehiclePosition previousValue = this._VehiclePosition.Entity;
				if (((previousValue != value) 
							|| (this._VehiclePosition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._VehiclePosition.Entity = null;
						previousValue.Incidents.Remove(this);
					}
					this._VehiclePosition.Entity = value;
					if ((value != null))
					{
						value.Incidents.Add(this);
						this._VehiclePositionID = value.VehiclePositionID;
					}
					else
					{
						this._VehiclePositionID = default(System.Guid);
					}
					this.SendPropertyChanged("VehiclePosition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncidentTypes")]
	public partial class IncidentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IncidentTypeID;
		
		private string _IncidentTypeCode;
		
		private string _IncidentType1;
		
		private EntitySet<Incident> _Incidents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncidentTypeIDChanging(System.Guid value);
    partial void OnIncidentTypeIDChanged();
    partial void OnIncidentTypeCodeChanging(string value);
    partial void OnIncidentTypeCodeChanged();
    partial void OnIncidentType1Changing(string value);
    partial void OnIncidentType1Changed();
    #endregion
		
		public IncidentType()
		{
			this._Incidents = new EntitySet<Incident>(new Action<Incident>(this.attach_Incidents), new Action<Incident>(this.detach_Incidents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IncidentTypeID
		{
			get
			{
				return this._IncidentTypeID;
			}
			set
			{
				if ((this._IncidentTypeID != value))
				{
					this.OnIncidentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._IncidentTypeID = value;
					this.SendPropertyChanged("IncidentTypeID");
					this.OnIncidentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentTypeCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string IncidentTypeCode
		{
			get
			{
				return this._IncidentTypeCode;
			}
			set
			{
				if ((this._IncidentTypeCode != value))
				{
					this.OnIncidentTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._IncidentTypeCode = value;
					this.SendPropertyChanged("IncidentTypeCode");
					this.OnIncidentTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="IncidentType", Storage="_IncidentType1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string IncidentType1
		{
			get
			{
				return this._IncidentType1;
			}
			set
			{
				if ((this._IncidentType1 != value))
				{
					this.OnIncidentType1Changing(value);
					this.SendPropertyChanging();
					this._IncidentType1 = value;
					this.SendPropertyChanged("IncidentType1");
					this.OnIncidentType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IncidentType_Incident", Storage="_Incidents", ThisKey="IncidentTypeID", OtherKey="IncidentTypeID")]
		public EntitySet<Incident> Incidents
		{
			get
			{
				return this._Incidents;
			}
			set
			{
				this._Incidents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.IncidentType = this;
		}
		
		private void detach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.IncidentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsuranceCarriers")]
	public partial class InsuranceCarrier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InsuranceID;
		
		private string _CarrierName;
		
		private string _InsurancePolicyNumber;
		
		private System.DateTime _ExpirationDate;
		
		private string _PolicyName;
		
		private string _PhoneNumber;
		
		private string _Fax;
		
		private string _Email;
		
		private EntitySet<ContractorInsurance> _ContractorInsurances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    partial void OnCarrierNameChanging(string value);
    partial void OnCarrierNameChanged();
    partial void OnInsurancePolicyNumberChanging(string value);
    partial void OnInsurancePolicyNumberChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    partial void OnPolicyNameChanging(string value);
    partial void OnPolicyNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public InsuranceCarrier()
		{
			this._ContractorInsurances = new EntitySet<ContractorInsurance>(new Action<ContractorInsurance>(this.attach_ContractorInsurances), new Action<ContractorInsurance>(this.detach_ContractorInsurances));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarrierName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CarrierName
		{
			get
			{
				return this._CarrierName;
			}
			set
			{
				if ((this._CarrierName != value))
				{
					this.OnCarrierNameChanging(value);
					this.SendPropertyChanging();
					this._CarrierName = value;
					this.SendPropertyChanged("CarrierName");
					this.OnCarrierNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsurancePolicyNumber", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string InsurancePolicyNumber
		{
			get
			{
				return this._InsurancePolicyNumber;
			}
			set
			{
				if ((this._InsurancePolicyNumber != value))
				{
					this.OnInsurancePolicyNumberChanging(value);
					this.SendPropertyChanging();
					this._InsurancePolicyNumber = value;
					this.SendPropertyChanged("InsurancePolicyNumber");
					this.OnInsurancePolicyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string PolicyName
		{
			get
			{
				return this._PolicyName;
			}
			set
			{
				if ((this._PolicyName != value))
				{
					this.OnPolicyNameChanging(value);
					this.SendPropertyChanging();
					this._PolicyName = value;
					this.SendPropertyChanged("PolicyName");
					this.OnPolicyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceCarrier_ContractorInsurance", Storage="_ContractorInsurances", ThisKey="InsuranceID", OtherKey="InsuranceID")]
		public EntitySet<ContractorInsurance> ContractorInsurances
		{
			get
			{
				return this._ContractorInsurances;
			}
			set
			{
				this._ContractorInsurances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractorInsurances(ContractorInsurance entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceCarrier = this;
		}
		
		private void detach_ContractorInsurances(ContractorInsurance entity)
		{
			this.SendPropertyChanging();
			entity.InsuranceCarrier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractionTypes")]
	public partial class InteractionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InteractionTypeID;
		
		private string _InteractionType1;
		
		private EntitySet<DriverInteraction> _DriverInteractions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInteractionTypeIDChanging(System.Guid value);
    partial void OnInteractionTypeIDChanged();
    partial void OnInteractionType1Changing(string value);
    partial void OnInteractionType1Changed();
    #endregion
		
		public InteractionType()
		{
			this._DriverInteractions = new EntitySet<DriverInteraction>(new Action<DriverInteraction>(this.attach_DriverInteractions), new Action<DriverInteraction>(this.detach_DriverInteractions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InteractionTypeID
		{
			get
			{
				return this._InteractionTypeID;
			}
			set
			{
				if ((this._InteractionTypeID != value))
				{
					this.OnInteractionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InteractionTypeID = value;
					this.SendPropertyChanged("InteractionTypeID");
					this.OnInteractionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="InteractionType", Storage="_InteractionType1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string InteractionType1
		{
			get
			{
				return this._InteractionType1;
			}
			set
			{
				if ((this._InteractionType1 != value))
				{
					this.OnInteractionType1Changing(value);
					this.SendPropertyChanging();
					this._InteractionType1 = value;
					this.SendPropertyChanged("InteractionType1");
					this.OnInteractionType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionType_DriverInteraction", Storage="_DriverInteractions", ThisKey="InteractionTypeID", OtherKey="InteractionTypeID")]
		public EntitySet<DriverInteraction> DriverInteractions
		{
			get
			{
				return this._DriverInteractions;
			}
			set
			{
				this._DriverInteractions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DriverInteractions(DriverInteraction entity)
		{
			this.SendPropertyChanging();
			entity.InteractionType = this;
		}
		
		private void detach_DriverInteractions(DriverInteraction entity)
		{
			this.SendPropertyChanging();
			entity.InteractionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LocationID;
		
		private string _LocationCode;
		
		private string _Location1;
		
		private EntitySet<Incident> _Incidents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(System.Guid value);
    partial void OnLocationIDChanged();
    partial void OnLocationCodeChanging(string value);
    partial void OnLocationCodeChanged();
    partial void OnLocation1Changing(string value);
    partial void OnLocation1Changed();
    #endregion
		
		public Location()
		{
			this._Incidents = new EntitySet<Incident>(new Action<Incident>(this.attach_Incidents), new Action<Incident>(this.detach_Incidents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string LocationCode
		{
			get
			{
				return this._LocationCode;
			}
			set
			{
				if ((this._LocationCode != value))
				{
					this.OnLocationCodeChanging(value);
					this.SendPropertyChanging();
					this._LocationCode = value;
					this.SendPropertyChanged("LocationCode");
					this.OnLocationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Location", Storage="_Location1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Location1
		{
			get
			{
				return this._Location1;
			}
			set
			{
				if ((this._Location1 != value))
				{
					this.OnLocation1Changing(value);
					this.SendPropertyChanging();
					this._Location1 = value;
					this.SendPropertyChanged("Location1");
					this.OnLocation1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Incident", Storage="_Incidents", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<Incident> Incidents
		{
			get
			{
				return this._Incidents;
			}
			set
			{
				this._Incidents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceTypes")]
	public partial class ServiceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ServiceTypeID;
		
		private string _ServiceTypeCode;
		
		private string _ServiceType1;
		
		private EntitySet<Assist> _Assists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServiceTypeIDChanging(System.Guid value);
    partial void OnServiceTypeIDChanged();
    partial void OnServiceTypeCodeChanging(string value);
    partial void OnServiceTypeCodeChanged();
    partial void OnServiceType1Changing(string value);
    partial void OnServiceType1Changed();
    #endregion
		
		public ServiceType()
		{
			this._Assists = new EntitySet<Assist>(new Action<Assist>(this.attach_Assists), new Action<Assist>(this.detach_Assists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ServiceTypeID
		{
			get
			{
				return this._ServiceTypeID;
			}
			set
			{
				if ((this._ServiceTypeID != value))
				{
					this.OnServiceTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeID = value;
					this.SendPropertyChanged("ServiceTypeID");
					this.OnServiceTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceTypeCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ServiceTypeCode
		{
			get
			{
				return this._ServiceTypeCode;
			}
			set
			{
				if ((this._ServiceTypeCode != value))
				{
					this.OnServiceTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ServiceTypeCode = value;
					this.SendPropertyChanged("ServiceTypeCode");
					this.OnServiceTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ServiceType", Storage="_ServiceType1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ServiceType1
		{
			get
			{
				return this._ServiceType1;
			}
			set
			{
				if ((this._ServiceType1 != value))
				{
					this.OnServiceType1Changing(value);
					this.SendPropertyChanging();
					this._ServiceType1 = value;
					this.SendPropertyChanged("ServiceType1");
					this.OnServiceType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceType_Assist", Storage="_Assists", ThisKey="ServiceTypeID", OtherKey="ServiceTypeID")]
		public EntitySet<Assist> Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				this._Assists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assists(Assist entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = this;
		}
		
		private void detach_Assists(Assist entity)
		{
			this.SendPropertyChanging();
			entity.ServiceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShiftSchedules")]
	public partial class ShiftSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BeatScheduleID;
		
		private System.Guid _BeatID;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeatScheduleIDChanging(System.Guid value);
    partial void OnBeatScheduleIDChanged();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public ShiftSchedule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatScheduleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatScheduleID
		{
			get
			{
				return this._BeatScheduleID;
			}
			set
			{
				if ((this._BeatScheduleID != value))
				{
					this.OnBeatScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._BeatScheduleID = value;
					this.SendPropertyChanged("BeatScheduleID");
					this.OnBeatScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TowLocations")]
	public partial class TowLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TowLocationID;
		
		private string _TowLocationCode;
		
		private string _TowLocation1;
		
		private EntitySet<Assist> _Assists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTowLocationIDChanging(System.Guid value);
    partial void OnTowLocationIDChanged();
    partial void OnTowLocationCodeChanging(string value);
    partial void OnTowLocationCodeChanged();
    partial void OnTowLocation1Changing(string value);
    partial void OnTowLocation1Changed();
    #endregion
		
		public TowLocation()
		{
			this._Assists = new EntitySet<Assist>(new Action<Assist>(this.attach_Assists), new Action<Assist>(this.detach_Assists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TowLocationID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TowLocationID
		{
			get
			{
				return this._TowLocationID;
			}
			set
			{
				if ((this._TowLocationID != value))
				{
					this.OnTowLocationIDChanging(value);
					this.SendPropertyChanging();
					this._TowLocationID = value;
					this.SendPropertyChanged("TowLocationID");
					this.OnTowLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TowLocationCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string TowLocationCode
		{
			get
			{
				return this._TowLocationCode;
			}
			set
			{
				if ((this._TowLocationCode != value))
				{
					this.OnTowLocationCodeChanging(value);
					this.SendPropertyChanging();
					this._TowLocationCode = value;
					this.SendPropertyChanged("TowLocationCode");
					this.OnTowLocationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TowLocation", Storage="_TowLocation1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TowLocation1
		{
			get
			{
				return this._TowLocation1;
			}
			set
			{
				if ((this._TowLocation1 != value))
				{
					this.OnTowLocation1Changing(value);
					this.SendPropertyChanging();
					this._TowLocation1 = value;
					this.SendPropertyChanged("TowLocation1");
					this.OnTowLocation1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TowLocation_Assist", Storage="_Assists", ThisKey="TowLocationID", OtherKey="TowLocationID")]
		public EntitySet<Assist> Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				this._Assists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assists(Assist entity)
		{
			this.SendPropertyChanging();
			entity.TowLocation = this;
		}
		
		private void detach_Assists(Assist entity)
		{
			this.SendPropertyChanging();
			entity.TowLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrafficSpeeds")]
	public partial class TrafficSpeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TrafficSpeedID;
		
		private string _TrafficSpeedCode;
		
		private string _TrafficSpeed1;
		
		private EntitySet<Incident> _Incidents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrafficSpeedIDChanging(System.Guid value);
    partial void OnTrafficSpeedIDChanged();
    partial void OnTrafficSpeedCodeChanging(string value);
    partial void OnTrafficSpeedCodeChanged();
    partial void OnTrafficSpeed1Changing(string value);
    partial void OnTrafficSpeed1Changed();
    #endregion
		
		public TrafficSpeed()
		{
			this._Incidents = new EntitySet<Incident>(new Action<Incident>(this.attach_Incidents), new Action<Incident>(this.detach_Incidents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrafficSpeedID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TrafficSpeedID
		{
			get
			{
				return this._TrafficSpeedID;
			}
			set
			{
				if ((this._TrafficSpeedID != value))
				{
					this.OnTrafficSpeedIDChanging(value);
					this.SendPropertyChanging();
					this._TrafficSpeedID = value;
					this.SendPropertyChanged("TrafficSpeedID");
					this.OnTrafficSpeedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrafficSpeedCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string TrafficSpeedCode
		{
			get
			{
				return this._TrafficSpeedCode;
			}
			set
			{
				if ((this._TrafficSpeedCode != value))
				{
					this.OnTrafficSpeedCodeChanging(value);
					this.SendPropertyChanging();
					this._TrafficSpeedCode = value;
					this.SendPropertyChanged("TrafficSpeedCode");
					this.OnTrafficSpeedCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TrafficSpeed", Storage="_TrafficSpeed1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TrafficSpeed1
		{
			get
			{
				return this._TrafficSpeed1;
			}
			set
			{
				if ((this._TrafficSpeed1 != value))
				{
					this.OnTrafficSpeed1Changing(value);
					this.SendPropertyChanging();
					this._TrafficSpeed1 = value;
					this.SendPropertyChanged("TrafficSpeed1");
					this.OnTrafficSpeed1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrafficSpeed_Incident", Storage="_Incidents", ThisKey="TrafficSpeedID", OtherKey="TrafficSpeedID")]
		public EntitySet<Incident> Incidents
		{
			get
			{
				return this._Incidents;
			}
			set
			{
				this._Incidents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.TrafficSpeed = this;
		}
		
		private void detach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.TrafficSpeed = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehiclePositions")]
	public partial class VehiclePosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VehiclePositionID;
		
		private string _VehiclePositionCode;
		
		private string _VehiclePosition1;
		
		private EntitySet<Incident> _Incidents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehiclePositionIDChanging(System.Guid value);
    partial void OnVehiclePositionIDChanged();
    partial void OnVehiclePositionCodeChanging(string value);
    partial void OnVehiclePositionCodeChanged();
    partial void OnVehiclePosition1Changing(string value);
    partial void OnVehiclePosition1Changed();
    #endregion
		
		public VehiclePosition()
		{
			this._Incidents = new EntitySet<Incident>(new Action<Incident>(this.attach_Incidents), new Action<Incident>(this.detach_Incidents));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehiclePositionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VehiclePositionID
		{
			get
			{
				return this._VehiclePositionID;
			}
			set
			{
				if ((this._VehiclePositionID != value))
				{
					this.OnVehiclePositionIDChanging(value);
					this.SendPropertyChanging();
					this._VehiclePositionID = value;
					this.SendPropertyChanged("VehiclePositionID");
					this.OnVehiclePositionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehiclePositionCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string VehiclePositionCode
		{
			get
			{
				return this._VehiclePositionCode;
			}
			set
			{
				if ((this._VehiclePositionCode != value))
				{
					this.OnVehiclePositionCodeChanging(value);
					this.SendPropertyChanging();
					this._VehiclePositionCode = value;
					this.SendPropertyChanged("VehiclePositionCode");
					this.OnVehiclePositionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="VehiclePosition", Storage="_VehiclePosition1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string VehiclePosition1
		{
			get
			{
				return this._VehiclePosition1;
			}
			set
			{
				if ((this._VehiclePosition1 != value))
				{
					this.OnVehiclePosition1Changing(value);
					this.SendPropertyChanging();
					this._VehiclePosition1 = value;
					this.SendPropertyChanged("VehiclePosition1");
					this.OnVehiclePosition1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehiclePosition_Incident", Storage="_Incidents", ThisKey="VehiclePositionID", OtherKey="VehiclePositionID")]
		public EntitySet<Incident> Incidents
		{
			get
			{
				return this._Incidents;
			}
			set
			{
				this._Incidents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.VehiclePosition = this;
		}
		
		private void detach_Incidents(Incident entity)
		{
			this.SendPropertyChanging();
			entity.VehiclePosition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VehicleTypes")]
	public partial class VehicleType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VehicleTypeID;
		
		private string _VehicleTypeCode;
		
		private string _VehicleType1;
		
		private EntitySet<Assist> _Assists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVehicleTypeIDChanging(System.Guid value);
    partial void OnVehicleTypeIDChanged();
    partial void OnVehicleTypeCodeChanging(string value);
    partial void OnVehicleTypeCodeChanged();
    partial void OnVehicleType1Changing(string value);
    partial void OnVehicleType1Changed();
    #endregion
		
		public VehicleType()
		{
			this._Assists = new EntitySet<Assist>(new Action<Assist>(this.attach_Assists), new Action<Assist>(this.detach_Assists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VehicleTypeID
		{
			get
			{
				return this._VehicleTypeID;
			}
			set
			{
				if ((this._VehicleTypeID != value))
				{
					this.OnVehicleTypeIDChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeID = value;
					this.SendPropertyChanged("VehicleTypeID");
					this.OnVehicleTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleTypeCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string VehicleTypeCode
		{
			get
			{
				return this._VehicleTypeCode;
			}
			set
			{
				if ((this._VehicleTypeCode != value))
				{
					this.OnVehicleTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._VehicleTypeCode = value;
					this.SendPropertyChanged("VehicleTypeCode");
					this.OnVehicleTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="VehicleType", Storage="_VehicleType1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string VehicleType1
		{
			get
			{
				return this._VehicleType1;
			}
			set
			{
				if ((this._VehicleType1 != value))
				{
					this.OnVehicleType1Changing(value);
					this.SendPropertyChanging();
					this._VehicleType1 = value;
					this.SendPropertyChanged("VehicleType1");
					this.OnVehicleType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="VehicleType_Assist", Storage="_Assists", ThisKey="VehicleTypeID", OtherKey="VehicleTypeID")]
		public EntitySet<Assist> Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				this._Assists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assists(Assist entity)
		{
			this.SendPropertyChanging();
			entity.VehicleType = this;
		}
		
		private void detach_Assists(Assist entity)
		{
			this.SendPropertyChanging();
			entity.VehicleType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vGPSTrackingLog")]
	public partial class vGPSTrackingLog
	{
		
		private System.Guid _GPSID;
		
		private string _Direction;
		
		private string _VehicleStatus;
		
		private System.DateTime _LastUpdate;
		
		private System.DateTime _timeStamp;
		
		private System.Guid _BeatSegmentID;
		
		private string _VehicleID;
		
		private double _Speed;
		
		private bool _Alarms;
		
		private System.Guid _DriverID;
		
		private string _VehicleNumber;
		
		private System.Guid _BeatID;
		
		private string _Position;
		
		private bool _SpeedingAlarm;
		
		private System.Nullable<double> _SpeedingValue;
		
		private System.Nullable<System.DateTime> _SpeedingTime;
		
		private string _SpeedingLocation;
		
		private bool _OutOfBoundsAlarm;
		
		private string _OutOfBoundsMessage;
		
		public vGPSTrackingLog()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GPSID
		{
			get
			{
				return this._GPSID;
			}
			set
			{
				if ((this._GPSID != value))
				{
					this._GPSID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this._Direction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleStatus
		{
			get
			{
				return this._VehicleStatus;
			}
			set
			{
				if ((this._VehicleStatus != value))
				{
					this._VehicleStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this._LastUpdate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime timeStamp
		{
			get
			{
				return this._timeStamp;
			}
			set
			{
				if ((this._timeStamp != value))
				{
					this._timeStamp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatSegmentID
		{
			get
			{
				return this._BeatSegmentID;
			}
			set
			{
				if ((this._BeatSegmentID != value))
				{
					this._BeatSegmentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this._VehicleID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speed", DbType="Float NOT NULL")]
		public double Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if ((this._Speed != value))
				{
					this._Speed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alarms", DbType="Bit NOT NULL")]
		public bool Alarms
		{
			get
			{
				return this._Alarms;
			}
			set
			{
				if ((this._Alarms != value))
				{
					this._Alarms = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					this._DriverID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleNumber
		{
			get
			{
				return this._VehicleNumber;
			}
			set
			{
				if ((this._VehicleNumber != value))
				{
					this._VehicleNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this._BeatID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(MAX)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeedingAlarm", DbType="Bit NOT NULL")]
		public bool SpeedingAlarm
		{
			get
			{
				return this._SpeedingAlarm;
			}
			set
			{
				if ((this._SpeedingAlarm != value))
				{
					this._SpeedingAlarm = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeedingValue", DbType="Float")]
		public System.Nullable<double> SpeedingValue
		{
			get
			{
				return this._SpeedingValue;
			}
			set
			{
				if ((this._SpeedingValue != value))
				{
					this._SpeedingValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeedingTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SpeedingTime
		{
			get
			{
				return this._SpeedingTime;
			}
			set
			{
				if ((this._SpeedingTime != value))
				{
					this._SpeedingTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeedingLocation", DbType="NVarChar(MAX)")]
		public string SpeedingLocation
		{
			get
			{
				return this._SpeedingLocation;
			}
			set
			{
				if ((this._SpeedingLocation != value))
				{
					this._SpeedingLocation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutOfBoundsAlarm", DbType="Bit NOT NULL")]
		public bool OutOfBoundsAlarm
		{
			get
			{
				return this._OutOfBoundsAlarm;
			}
			set
			{
				if ((this._OutOfBoundsAlarm != value))
				{
					this._OutOfBoundsAlarm = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutOfBoundsMessage", DbType="VarChar(50)")]
		public string OutOfBoundsMessage
		{
			get
			{
				return this._OutOfBoundsMessage;
			}
			set
			{
				if ((this._OutOfBoundsMessage != value))
				{
					this._OutOfBoundsMessage = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vBeatSegments")]
	public partial class vBeatSegment
	{
		
		private System.Guid _BeatSegmentID;
		
		private string _BeatSegmentDescription;
		
		private string _CHPDescription;
		
		private string _PIMSID;
		
		private string _BeatSegmentExtent;
		
		private string _BeatSegmentNumber;
		
		public vBeatSegment()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatSegmentID
		{
			get
			{
				return this._BeatSegmentID;
			}
			set
			{
				if ((this._BeatSegmentID != value))
				{
					this._BeatSegmentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentDescription", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BeatSegmentDescription
		{
			get
			{
				return this._BeatSegmentDescription;
			}
			set
			{
				if ((this._BeatSegmentDescription != value))
				{
					this._BeatSegmentDescription = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHPDescription", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string CHPDescription
		{
			get
			{
				return this._CHPDescription;
			}
			set
			{
				if ((this._CHPDescription != value))
				{
					this._CHPDescription = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PIMSID", DbType="VarChar(50)")]
		public string PIMSID
		{
			get
			{
				return this._PIMSID;
			}
			set
			{
				if ((this._PIMSID != value))
				{
					this._PIMSID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentExtent", DbType="NVarChar(MAX)")]
		public string BeatSegmentExtent
		{
			get
			{
				return this._BeatSegmentExtent;
			}
			set
			{
				if ((this._BeatSegmentExtent != value))
				{
					this._BeatSegmentExtent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentNumber", DbType="VarChar(50)")]
		public string BeatSegmentNumber
		{
			get
			{
				return this._BeatSegmentNumber;
			}
			set
			{
				if ((this._BeatSegmentNumber != value))
				{
					this._BeatSegmentNumber = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vGPSTracking")]
	public partial class vGPSTracking
	{
		
		private System.Guid _GPSID;
		
		private string _Direction;
		
		private string _VehicleStatus;
		
		private System.DateTime _LastUpdate;
		
		private System.DateTime _timeStamp;
		
		private System.Guid _BeatSegmentID;
		
		private string _VehicleID;
		
		private double _Speed;
		
		private bool _Alarms;
		
		private System.Guid _DriverID;
		
		private string _VehicleNumber;
		
		private System.Guid _BeatID;
		
		private string _Position;
		
		private bool _SpeedingAlarm;
		
		private System.Nullable<double> _SpeedingValue;
		
		private System.Nullable<System.DateTime> _SpeedingTime;
		
		private string _SpeedingLocation;
		
		private bool _OutOfBoundsAlarm;
		
		private string _OutOfBoundsMessage;
		
		public vGPSTracking()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPSID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GPSID
		{
			get
			{
				return this._GPSID;
			}
			set
			{
				if ((this._GPSID != value))
				{
					this._GPSID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this._Direction = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleStatus
		{
			get
			{
				return this._VehicleStatus;
			}
			set
			{
				if ((this._VehicleStatus != value))
				{
					this._VehicleStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this._LastUpdate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime timeStamp
		{
			get
			{
				return this._timeStamp;
			}
			set
			{
				if ((this._timeStamp != value))
				{
					this._timeStamp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatSegmentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatSegmentID
		{
			get
			{
				return this._BeatSegmentID;
			}
			set
			{
				if ((this._BeatSegmentID != value))
				{
					this._BeatSegmentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleID
		{
			get
			{
				return this._VehicleID;
			}
			set
			{
				if ((this._VehicleID != value))
				{
					this._VehicleID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speed", DbType="Float NOT NULL")]
		public double Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if ((this._Speed != value))
				{
					this._Speed = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alarms", DbType="Bit NOT NULL")]
		public bool Alarms
		{
			get
			{
				return this._Alarms;
			}
			set
			{
				if ((this._Alarms != value))
				{
					this._Alarms = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					this._DriverID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleNumber
		{
			get
			{
				return this._VehicleNumber;
			}
			set
			{
				if ((this._VehicleNumber != value))
				{
					this._VehicleNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this._BeatID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(MAX)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeedingAlarm", DbType="Bit NOT NULL")]
		public bool SpeedingAlarm
		{
			get
			{
				return this._SpeedingAlarm;
			}
			set
			{
				if ((this._SpeedingAlarm != value))
				{
					this._SpeedingAlarm = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeedingValue", DbType="Float")]
		public System.Nullable<double> SpeedingValue
		{
			get
			{
				return this._SpeedingValue;
			}
			set
			{
				if ((this._SpeedingValue != value))
				{
					this._SpeedingValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeedingTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SpeedingTime
		{
			get
			{
				return this._SpeedingTime;
			}
			set
			{
				if ((this._SpeedingTime != value))
				{
					this._SpeedingTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeedingLocation", DbType="NVarChar(MAX)")]
		public string SpeedingLocation
		{
			get
			{
				return this._SpeedingLocation;
			}
			set
			{
				if ((this._SpeedingLocation != value))
				{
					this._SpeedingLocation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutOfBoundsAlarm", DbType="Bit NOT NULL")]
		public bool OutOfBoundsAlarm
		{
			get
			{
				return this._OutOfBoundsAlarm;
			}
			set
			{
				if ((this._OutOfBoundsAlarm != value))
				{
					this._OutOfBoundsAlarm = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutOfBoundsMessage", DbType="VarChar(50)")]
		public string OutOfBoundsMessage
		{
			get
			{
				return this._OutOfBoundsMessage;
			}
			set
			{
				if ((this._OutOfBoundsMessage != value))
				{
					this._OutOfBoundsMessage = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RoleID;
		
		private string _RoleName;
		
		private string _RoleDescription;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleDescriptionChanging(string value);
    partial void OnRoleDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDescription", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string RoleDescription
		{
			get
			{
				return this._RoleDescription;
			}
			set
			{
				if ((this._RoleDescription != value))
				{
					this.OnRoleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoleDescription = value;
					this.SendPropertyChanged("RoleDescription");
					this.OnRoleDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GroupID;
		
		private string _GroupName;
		
		private string _GroupCity;
		
		private string _GroupState;
		
		private string _GroupAddress;
		
		private string _GroupZip;
		
		private string _GroupPhone;
		
		private string _GroupContactName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnGroupCityChanging(string value);
    partial void OnGroupCityChanged();
    partial void OnGroupStateChanging(string value);
    partial void OnGroupStateChanged();
    partial void OnGroupAddressChanging(string value);
    partial void OnGroupAddressChanged();
    partial void OnGroupZipChanging(string value);
    partial void OnGroupZipChanged();
    partial void OnGroupPhoneChanging(string value);
    partial void OnGroupPhoneChanged();
    partial void OnGroupContactNameChanging(string value);
    partial void OnGroupContactNameChanged();
    #endregion
		
		public Group()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupCity", DbType="VarChar(50)")]
		public string GroupCity
		{
			get
			{
				return this._GroupCity;
			}
			set
			{
				if ((this._GroupCity != value))
				{
					this.OnGroupCityChanging(value);
					this.SendPropertyChanging();
					this._GroupCity = value;
					this.SendPropertyChanged("GroupCity");
					this.OnGroupCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupState", DbType="Char(2)")]
		public string GroupState
		{
			get
			{
				return this._GroupState;
			}
			set
			{
				if ((this._GroupState != value))
				{
					this.OnGroupStateChanging(value);
					this.SendPropertyChanging();
					this._GroupState = value;
					this.SendPropertyChanged("GroupState");
					this.OnGroupStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupAddress", DbType="VarChar(100)")]
		public string GroupAddress
		{
			get
			{
				return this._GroupAddress;
			}
			set
			{
				if ((this._GroupAddress != value))
				{
					this.OnGroupAddressChanging(value);
					this.SendPropertyChanging();
					this._GroupAddress = value;
					this.SendPropertyChanged("GroupAddress");
					this.OnGroupAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupZip", DbType="VarChar(10)")]
		public string GroupZip
		{
			get
			{
				return this._GroupZip;
			}
			set
			{
				if ((this._GroupZip != value))
				{
					this.OnGroupZipChanging(value);
					this.SendPropertyChanging();
					this._GroupZip = value;
					this.SendPropertyChanged("GroupZip");
					this.OnGroupZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupPhone", DbType="VarChar(20)")]
		public string GroupPhone
		{
			get
			{
				return this._GroupPhone;
			}
			set
			{
				if ((this._GroupPhone != value))
				{
					this.OnGroupPhoneChanging(value);
					this.SendPropertyChanging();
					this._GroupPhone = value;
					this.SendPropertyChanged("GroupPhone");
					this.OnGroupPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupContactName", DbType="VarChar(50)")]
		public string GroupContactName
		{
			get
			{
				return this._GroupContactName;
			}
			set
			{
				if ((this._GroupContactName != value))
				{
					this.OnGroupContactNameChanging(value);
					this.SendPropertyChanging();
					this._GroupContactName = value;
					this.SendPropertyChanged("GroupContactName");
					this.OnGroupContactNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractorInsurance")]
	public partial class ContractorInsurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContractorID;
		
		private System.Guid _InsuranceID;
		
		private EntityRef<InsuranceCarrier> _InsuranceCarrier;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    partial void OnInsuranceIDChanging(System.Guid value);
    partial void OnInsuranceIDChanged();
    #endregion
		
		public ContractorInsurance()
		{
			this._InsuranceCarrier = default(EntityRef<InsuranceCarrier>);
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InsuranceID
		{
			get
			{
				return this._InsuranceID;
			}
			set
			{
				if ((this._InsuranceID != value))
				{
					if (this._InsuranceCarrier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInsuranceIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceID = value;
					this.SendPropertyChanged("InsuranceID");
					this.OnInsuranceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsuranceCarrier_ContractorInsurance", Storage="_InsuranceCarrier", ThisKey="InsuranceID", OtherKey="InsuranceID", IsForeignKey=true)]
		public InsuranceCarrier InsuranceCarrier
		{
			get
			{
				return this._InsuranceCarrier.Entity;
			}
			set
			{
				InsuranceCarrier previousValue = this._InsuranceCarrier.Entity;
				if (((previousValue != value) 
							|| (this._InsuranceCarrier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsuranceCarrier.Entity = null;
						previousValue.ContractorInsurances.Remove(this);
					}
					this._InsuranceCarrier.Entity = value;
					if ((value != null))
					{
						value.ContractorInsurances.Add(this);
						this._InsuranceID = value.InsuranceID;
					}
					else
					{
						this._InsuranceID = default(System.Guid);
					}
					this.SendPropertyChanged("InsuranceCarrier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_ContractorInsurance", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ContractorID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.ContractorInsurances.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.ContractorInsurances.Add(this);
						this._ContractorID = value.ContractorID;
					}
					else
					{
						this._ContractorID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InspectionTypes")]
	public partial class InspectionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InspectionTypeID;
		
		private string _InspectionType1;
		
		private string _InspectionTypeCode;
		
		private EntitySet<CHPInspection> _CHPInspections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInspectionTypeIDChanging(System.Guid value);
    partial void OnInspectionTypeIDChanged();
    partial void OnInspectionType1Changing(string value);
    partial void OnInspectionType1Changed();
    partial void OnInspectionTypeCodeChanging(string value);
    partial void OnInspectionTypeCodeChanged();
    #endregion
		
		public InspectionType()
		{
			this._CHPInspections = new EntitySet<CHPInspection>(new Action<CHPInspection>(this.attach_CHPInspections), new Action<CHPInspection>(this.detach_CHPInspections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InspectionTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InspectionTypeID
		{
			get
			{
				return this._InspectionTypeID;
			}
			set
			{
				if ((this._InspectionTypeID != value))
				{
					this.OnInspectionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InspectionTypeID = value;
					this.SendPropertyChanged("InspectionTypeID");
					this.OnInspectionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="InspectionType", Storage="_InspectionType1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string InspectionType1
		{
			get
			{
				return this._InspectionType1;
			}
			set
			{
				if ((this._InspectionType1 != value))
				{
					this.OnInspectionType1Changing(value);
					this.SendPropertyChanging();
					this._InspectionType1 = value;
					this.SendPropertyChanged("InspectionType1");
					this.OnInspectionType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InspectionTypeCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string InspectionTypeCode
		{
			get
			{
				return this._InspectionTypeCode;
			}
			set
			{
				if ((this._InspectionTypeCode != value))
				{
					this.OnInspectionTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._InspectionTypeCode = value;
					this.SendPropertyChanged("InspectionTypeCode");
					this.OnInspectionTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InspectionType_CHPInspection", Storage="_CHPInspections", ThisKey="InspectionTypeID", OtherKey="InspectionTypeID")]
		public EntitySet<CHPInspection> CHPInspections
		{
			get
			{
				return this._CHPInspections;
			}
			set
			{
				this._CHPInspections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHPInspections(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.InspectionType = this;
		}
		
		private void detach_CHPInspections(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.InspectionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CHPOfficer")]
	public partial class CHPOfficer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BadgeID;
		
		private string _OfficerLastName;
		
		private string _OfficerFirstName;
		
		private EntitySet<CHPInspection> _CHPInspections;
		
		private EntitySet<CHPInspection> _CHPInspections1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBadgeIDChanging(string value);
    partial void OnBadgeIDChanged();
    partial void OnOfficerLastNameChanging(string value);
    partial void OnOfficerLastNameChanged();
    partial void OnOfficerFirstNameChanging(string value);
    partial void OnOfficerFirstNameChanged();
    #endregion
		
		public CHPOfficer()
		{
			this._CHPInspections = new EntitySet<CHPInspection>(new Action<CHPInspection>(this.attach_CHPInspections), new Action<CHPInspection>(this.detach_CHPInspections));
			this._CHPInspections1 = new EntitySet<CHPInspection>(new Action<CHPInspection>(this.attach_CHPInspections1), new Action<CHPInspection>(this.detach_CHPInspections1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BadgeID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BadgeID
		{
			get
			{
				return this._BadgeID;
			}
			set
			{
				if ((this._BadgeID != value))
				{
					this.OnBadgeIDChanging(value);
					this.SendPropertyChanging();
					this._BadgeID = value;
					this.SendPropertyChanged("BadgeID");
					this.OnBadgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficerLastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OfficerLastName
		{
			get
			{
				return this._OfficerLastName;
			}
			set
			{
				if ((this._OfficerLastName != value))
				{
					this.OnOfficerLastNameChanging(value);
					this.SendPropertyChanging();
					this._OfficerLastName = value;
					this.SendPropertyChanged("OfficerLastName");
					this.OnOfficerLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficerFirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string OfficerFirstName
		{
			get
			{
				return this._OfficerFirstName;
			}
			set
			{
				if ((this._OfficerFirstName != value))
				{
					this.OnOfficerFirstNameChanging(value);
					this.SendPropertyChanging();
					this._OfficerFirstName = value;
					this.SendPropertyChanged("OfficerFirstName");
					this.OnOfficerFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHPOfficer_CHPInspection", Storage="_CHPInspections", ThisKey="BadgeID", OtherKey="BadgeID")]
		public EntitySet<CHPInspection> CHPInspections
		{
			get
			{
				return this._CHPInspections;
			}
			set
			{
				this._CHPInspections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHPOfficer_CHPInspection1", Storage="_CHPInspections1", ThisKey="BadgeID", OtherKey="BadgeID")]
		public EntitySet<CHPInspection> CHPInspections1
		{
			get
			{
				return this._CHPInspections1;
			}
			set
			{
				this._CHPInspections1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHPInspections(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.CHPOfficer = this;
		}
		
		private void detach_CHPInspections(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.CHPOfficer = null;
		}
		
		private void attach_CHPInspections1(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.CHPOfficer1 = this;
		}
		
		private void detach_CHPInspections1(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.CHPOfficer1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CHPInspections")]
	public partial class CHPInspection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InspectionID;
		
		private System.Guid _FleetVehicleID;
		
		private string _BadgeID;
		
		private System.DateTime _InspectionDate;
		
		private System.Guid _InspectionTypeID;
		
		private string _InspectionNotes;
		
		private System.Guid _ContractorID;
		
		private EntityRef<CHPOfficer> _CHPOfficer;
		
		private EntityRef<CHPOfficer> _CHPOfficer1;
		
		private EntityRef<InspectionType> _InspectionType;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<FleetVehicle> _FleetVehicle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInspectionIDChanging(System.Guid value);
    partial void OnInspectionIDChanged();
    partial void OnFleetVehicleIDChanging(System.Guid value);
    partial void OnFleetVehicleIDChanged();
    partial void OnBadgeIDChanging(string value);
    partial void OnBadgeIDChanged();
    partial void OnInspectionDateChanging(System.DateTime value);
    partial void OnInspectionDateChanged();
    partial void OnInspectionTypeIDChanging(System.Guid value);
    partial void OnInspectionTypeIDChanged();
    partial void OnInspectionNotesChanging(string value);
    partial void OnInspectionNotesChanged();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    #endregion
		
		public CHPInspection()
		{
			this._CHPOfficer = default(EntityRef<CHPOfficer>);
			this._CHPOfficer1 = default(EntityRef<CHPOfficer>);
			this._InspectionType = default(EntityRef<InspectionType>);
			this._Contractor = default(EntityRef<Contractor>);
			this._FleetVehicle = default(EntityRef<FleetVehicle>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InspectionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InspectionID
		{
			get
			{
				return this._InspectionID;
			}
			set
			{
				if ((this._InspectionID != value))
				{
					this.OnInspectionIDChanging(value);
					this.SendPropertyChanging();
					this._InspectionID = value;
					this.SendPropertyChanged("InspectionID");
					this.OnInspectionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetVehicleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FleetVehicleID
		{
			get
			{
				return this._FleetVehicleID;
			}
			set
			{
				if ((this._FleetVehicleID != value))
				{
					if (this._FleetVehicle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFleetVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._FleetVehicleID = value;
					this.SendPropertyChanged("FleetVehicleID");
					this.OnFleetVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BadgeID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BadgeID
		{
			get
			{
				return this._BadgeID;
			}
			set
			{
				if ((this._BadgeID != value))
				{
					if ((this._CHPOfficer.HasLoadedOrAssignedValue || this._CHPOfficer1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBadgeIDChanging(value);
					this.SendPropertyChanging();
					this._BadgeID = value;
					this.SendPropertyChanged("BadgeID");
					this.OnBadgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InspectionDate", DbType="DateTime NOT NULL")]
		public System.DateTime InspectionDate
		{
			get
			{
				return this._InspectionDate;
			}
			set
			{
				if ((this._InspectionDate != value))
				{
					this.OnInspectionDateChanging(value);
					this.SendPropertyChanging();
					this._InspectionDate = value;
					this.SendPropertyChanged("InspectionDate");
					this.OnInspectionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InspectionTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InspectionTypeID
		{
			get
			{
				return this._InspectionTypeID;
			}
			set
			{
				if ((this._InspectionTypeID != value))
				{
					if (this._InspectionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInspectionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InspectionTypeID = value;
					this.SendPropertyChanged("InspectionTypeID");
					this.OnInspectionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InspectionNotes", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string InspectionNotes
		{
			get
			{
				return this._InspectionNotes;
			}
			set
			{
				if ((this._InspectionNotes != value))
				{
					this.OnInspectionNotesChanging(value);
					this.SendPropertyChanging();
					this._InspectionNotes = value;
					this.SendPropertyChanged("InspectionNotes");
					this.OnInspectionNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHPOfficer_CHPInspection", Storage="_CHPOfficer", ThisKey="BadgeID", OtherKey="BadgeID", IsForeignKey=true)]
		public CHPOfficer CHPOfficer
		{
			get
			{
				return this._CHPOfficer.Entity;
			}
			set
			{
				CHPOfficer previousValue = this._CHPOfficer.Entity;
				if (((previousValue != value) 
							|| (this._CHPOfficer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHPOfficer.Entity = null;
						previousValue.CHPInspections.Remove(this);
					}
					this._CHPOfficer.Entity = value;
					if ((value != null))
					{
						value.CHPInspections.Add(this);
						this._BadgeID = value.BadgeID;
					}
					else
					{
						this._BadgeID = default(string);
					}
					this.SendPropertyChanged("CHPOfficer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CHPOfficer_CHPInspection1", Storage="_CHPOfficer1", ThisKey="BadgeID", OtherKey="BadgeID", IsForeignKey=true)]
		public CHPOfficer CHPOfficer1
		{
			get
			{
				return this._CHPOfficer1.Entity;
			}
			set
			{
				CHPOfficer previousValue = this._CHPOfficer1.Entity;
				if (((previousValue != value) 
							|| (this._CHPOfficer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CHPOfficer1.Entity = null;
						previousValue.CHPInspections1.Remove(this);
					}
					this._CHPOfficer1.Entity = value;
					if ((value != null))
					{
						value.CHPInspections1.Add(this);
						this._BadgeID = value.BadgeID;
					}
					else
					{
						this._BadgeID = default(string);
					}
					this.SendPropertyChanged("CHPOfficer1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InspectionType_CHPInspection", Storage="_InspectionType", ThisKey="InspectionTypeID", OtherKey="InspectionTypeID", IsForeignKey=true)]
		public InspectionType InspectionType
		{
			get
			{
				return this._InspectionType.Entity;
			}
			set
			{
				InspectionType previousValue = this._InspectionType.Entity;
				if (((previousValue != value) 
							|| (this._InspectionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InspectionType.Entity = null;
						previousValue.CHPInspections.Remove(this);
					}
					this._InspectionType.Entity = value;
					if ((value != null))
					{
						value.CHPInspections.Add(this);
						this._InspectionTypeID = value.InspectionTypeID;
					}
					else
					{
						this._InspectionTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("InspectionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_CHPInspection", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ContractorID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.CHPInspections.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.CHPInspections.Add(this);
						this._ContractorID = value.ContractorID;
					}
					else
					{
						this._ContractorID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FleetVehicle_CHPInspection", Storage="_FleetVehicle", ThisKey="FleetVehicleID", OtherKey="FleetVehicleID", IsForeignKey=true)]
		public FleetVehicle FleetVehicle
		{
			get
			{
				return this._FleetVehicle.Entity;
			}
			set
			{
				FleetVehicle previousValue = this._FleetVehicle.Entity;
				if (((previousValue != value) 
							|| (this._FleetVehicle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FleetVehicle.Entity = null;
						previousValue.CHPInspections.Remove(this);
					}
					this._FleetVehicle.Entity = value;
					if ((value != null))
					{
						value.CHPInspections.Add(this);
						this._FleetVehicleID = value.FleetVehicleID;
					}
					else
					{
						this._FleetVehicleID = default(System.Guid);
					}
					this.SendPropertyChanged("FleetVehicle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vCallBoxes")]
	public partial class vCallBox
	{
		
		private System.Guid _CallBoxID;
		
		private string _TelephoneNumber;
		
		private string _Location;
		
		private int _FreewayID;
		
		private string _SiteType;
		
		private string _Comments;
		
		private string _Position;
		
		private string _SignNumber;
		
		public vCallBox()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallBoxID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CallBoxID
		{
			get
			{
				return this._CallBoxID;
			}
			set
			{
				if ((this._CallBoxID != value))
				{
					this._CallBoxID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this._TelephoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this._Location = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreewayID", DbType="Int NOT NULL")]
		public int FreewayID
		{
			get
			{
				return this._FreewayID;
			}
			set
			{
				if ((this._FreewayID != value))
				{
					this._FreewayID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SiteType
		{
			get
			{
				return this._SiteType;
			}
			set
			{
				if ((this._SiteType != value))
				{
					this._SiteType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(MAX)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SignNumber
		{
			get
			{
				return this._SignNumber;
			}
			set
			{
				if ((this._SignNumber != value))
				{
					this._SignNumber = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractorManagers")]
	public partial class ContractorManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContractorManagerID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _PhoneNumber;
		
		private string _CellPhone;
		
		private string _Email;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Guid _ContractorID;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractorManagerIDChanging(System.Guid value);
    partial void OnContractorManagerIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    #endregion
		
		public ContractorManager()
		{
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorManagerID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractorManagerID
		{
			get
			{
				return this._ContractorManagerID;
			}
			set
			{
				if ((this._ContractorManagerID != value))
				{
					this.OnContractorManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorManagerID = value;
					this.SendPropertyChanged("ContractorManagerID");
					this.OnContractorManagerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(20)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(75) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_ContractorManager", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ContractorID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.ContractorManagers.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.ContractorManagers.Add(this);
						this._ContractorID = value.ContractorID;
					}
					else
					{
						this._ContractorID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contractors")]
	public partial class Contractor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContractorID;
		
		private string _Address;
		
		private string _OfficeTelephone;
		
		private string _MCPNumber;
		
		private System.DateTime _MCPExpiration;
		
		private string _Comments;
		
		private string _ContractCompanyName;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private EntitySet<ContractorInsurance> _ContractorInsurances;
		
		private EntitySet<CHPInspection> _CHPInspections;
		
		private EntitySet<ContractorManager> _ContractorManagers;
		
		private EntitySet<Contract> _Contracts;
		
		private EntitySet<Driver> _Drivers;
		
		private EntitySet<FleetVehicle> _FleetVehicles;
		
		private EntitySet<DriverInteraction> _DriverInteractions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnOfficeTelephoneChanging(string value);
    partial void OnOfficeTelephoneChanged();
    partial void OnMCPNumberChanging(string value);
    partial void OnMCPNumberChanged();
    partial void OnMCPExpirationChanging(System.DateTime value);
    partial void OnMCPExpirationChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnContractCompanyNameChanging(string value);
    partial void OnContractCompanyNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    #endregion
		
		public Contractor()
		{
			this._ContractorInsurances = new EntitySet<ContractorInsurance>(new Action<ContractorInsurance>(this.attach_ContractorInsurances), new Action<ContractorInsurance>(this.detach_ContractorInsurances));
			this._CHPInspections = new EntitySet<CHPInspection>(new Action<CHPInspection>(this.attach_CHPInspections), new Action<CHPInspection>(this.detach_CHPInspections));
			this._ContractorManagers = new EntitySet<ContractorManager>(new Action<ContractorManager>(this.attach_ContractorManagers), new Action<ContractorManager>(this.detach_ContractorManagers));
			this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			this._FleetVehicles = new EntitySet<FleetVehicle>(new Action<FleetVehicle>(this.attach_FleetVehicles), new Action<FleetVehicle>(this.detach_FleetVehicles));
			this._DriverInteractions = new EntitySet<DriverInteraction>(new Action<DriverInteraction>(this.attach_DriverInteractions), new Action<DriverInteraction>(this.detach_DriverInteractions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeTelephone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string OfficeTelephone
		{
			get
			{
				return this._OfficeTelephone;
			}
			set
			{
				if ((this._OfficeTelephone != value))
				{
					this.OnOfficeTelephoneChanging(value);
					this.SendPropertyChanging();
					this._OfficeTelephone = value;
					this.SendPropertyChanged("OfficeTelephone");
					this.OnOfficeTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MCPNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MCPNumber
		{
			get
			{
				return this._MCPNumber;
			}
			set
			{
				if ((this._MCPNumber != value))
				{
					this.OnMCPNumberChanging(value);
					this.SendPropertyChanging();
					this._MCPNumber = value;
					this.SendPropertyChanged("MCPNumber");
					this.OnMCPNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MCPExpiration", DbType="Date NOT NULL")]
		public System.DateTime MCPExpiration
		{
			get
			{
				return this._MCPExpiration;
			}
			set
			{
				if ((this._MCPExpiration != value))
				{
					this.OnMCPExpirationChanging(value);
					this.SendPropertyChanging();
					this._MCPExpiration = value;
					this.SendPropertyChanged("MCPExpiration");
					this.OnMCPExpirationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractCompanyName", DbType="VarChar(100)")]
		public string ContractCompanyName
		{
			get
			{
				return this._ContractCompanyName;
			}
			set
			{
				if ((this._ContractCompanyName != value))
				{
					this.OnContractCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._ContractCompanyName = value;
					this.SendPropertyChanged("ContractCompanyName");
					this.OnContractCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(2)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_ContractorInsurance", Storage="_ContractorInsurances", ThisKey="ContractorID", OtherKey="ContractorID")]
		public EntitySet<ContractorInsurance> ContractorInsurances
		{
			get
			{
				return this._ContractorInsurances;
			}
			set
			{
				this._ContractorInsurances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_CHPInspection", Storage="_CHPInspections", ThisKey="ContractorID", OtherKey="ContractorID")]
		public EntitySet<CHPInspection> CHPInspections
		{
			get
			{
				return this._CHPInspections;
			}
			set
			{
				this._CHPInspections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_ContractorManager", Storage="_ContractorManagers", ThisKey="ContractorID", OtherKey="ContractorID")]
		public EntitySet<ContractorManager> ContractorManagers
		{
			get
			{
				return this._ContractorManagers;
			}
			set
			{
				this._ContractorManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Contract", Storage="_Contracts", ThisKey="ContractorID", OtherKey="ContractorID")]
		public EntitySet<Contract> Contracts
		{
			get
			{
				return this._Contracts;
			}
			set
			{
				this._Contracts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Driver", Storage="_Drivers", ThisKey="ContractorID", OtherKey="ContractorID")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_FleetVehicle", Storage="_FleetVehicles", ThisKey="ContractorID", OtherKey="ContractorID")]
		public EntitySet<FleetVehicle> FleetVehicles
		{
			get
			{
				return this._FleetVehicles;
			}
			set
			{
				this._FleetVehicles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_DriverInteraction", Storage="_DriverInteractions", ThisKey="ContractorID", OtherKey="ContractorID")]
		public EntitySet<DriverInteraction> DriverInteractions
		{
			get
			{
				return this._DriverInteractions;
			}
			set
			{
				this._DriverInteractions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractorInsurances(ContractorInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_ContractorInsurances(ContractorInsurance entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_CHPInspections(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_CHPInspections(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_ContractorManagers(ContractorManager entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_ContractorManagers(ContractorManager entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_Contracts(Contract entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_FleetVehicles(FleetVehicle entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_FleetVehicles(FleetVehicle entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
		
		private void attach_DriverInteractions(DriverInteraction entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_DriverInteractions(DriverInteraction entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vBeats")]
	public partial class vBeat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BeatID;
		
		private string _BeatDescription;
		
		private bool _Active;
		
		private string _BeatExtent;
		
		private int _FreewayID;
		
		private string _BeatNumber;
		
		private string _BeatColor;
		
		private System.Nullable<bool> _IsTemporary;
		
		private string _LastUpdateBy;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private EntitySet<ContractsBeat> _ContractsBeats;
		
		private EntityRef<BeatBeatSchedule> _BeatBeatSchedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    partial void OnBeatDescriptionChanging(string value);
    partial void OnBeatDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnBeatExtentChanging(string value);
    partial void OnBeatExtentChanged();
    partial void OnFreewayIDChanging(int value);
    partial void OnFreewayIDChanged();
    partial void OnBeatNumberChanging(string value);
    partial void OnBeatNumberChanged();
    partial void OnBeatColorChanging(string value);
    partial void OnBeatColorChanged();
    partial void OnIsTemporaryChanging(System.Nullable<bool> value);
    partial void OnIsTemporaryChanged();
    partial void OnLastUpdateByChanging(string value);
    partial void OnLastUpdateByChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public vBeat()
		{
			this._ContractsBeats = new EntitySet<ContractsBeat>(new Action<ContractsBeat>(this.attach_ContractsBeats), new Action<ContractsBeat>(this.detach_ContractsBeats));
			this._BeatBeatSchedule = default(EntityRef<BeatBeatSchedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					if (this._BeatBeatSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatDescription", DbType="VarChar(500)")]
		public string BeatDescription
		{
			get
			{
				return this._BeatDescription;
			}
			set
			{
				if ((this._BeatDescription != value))
				{
					this.OnBeatDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BeatDescription = value;
					this.SendPropertyChanged("BeatDescription");
					this.OnBeatDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatExtent", DbType="NVarChar(MAX)")]
		public string BeatExtent
		{
			get
			{
				return this._BeatExtent;
			}
			set
			{
				if ((this._BeatExtent != value))
				{
					this.OnBeatExtentChanging(value);
					this.SendPropertyChanging();
					this._BeatExtent = value;
					this.SendPropertyChanged("BeatExtent");
					this.OnBeatExtentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreewayID", DbType="Int NOT NULL")]
		public int FreewayID
		{
			get
			{
				return this._FreewayID;
			}
			set
			{
				if ((this._FreewayID != value))
				{
					this.OnFreewayIDChanging(value);
					this.SendPropertyChanging();
					this._FreewayID = value;
					this.SendPropertyChanged("FreewayID");
					this.OnFreewayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatNumber", DbType="VarChar(50)")]
		public string BeatNumber
		{
			get
			{
				return this._BeatNumber;
			}
			set
			{
				if ((this._BeatNumber != value))
				{
					this.OnBeatNumberChanging(value);
					this.SendPropertyChanging();
					this._BeatNumber = value;
					this.SendPropertyChanged("BeatNumber");
					this.OnBeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatColor", DbType="VarChar(50)")]
		public string BeatColor
		{
			get
			{
				return this._BeatColor;
			}
			set
			{
				if ((this._BeatColor != value))
				{
					this.OnBeatColorChanging(value);
					this.SendPropertyChanging();
					this._BeatColor = value;
					this.SendPropertyChanged("BeatColor");
					this.OnBeatColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTemporary", DbType="Bit")]
		public System.Nullable<bool> IsTemporary
		{
			get
			{
				return this._IsTemporary;
			}
			set
			{
				if ((this._IsTemporary != value))
				{
					this.OnIsTemporaryChanging(value);
					this.SendPropertyChanging();
					this._IsTemporary = value;
					this.SendPropertyChanged("IsTemporary");
					this.OnIsTemporaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateBy", DbType="VarChar(50)")]
		public string LastUpdateBy
		{
			get
			{
				return this._LastUpdateBy;
			}
			set
			{
				if ((this._LastUpdateBy != value))
				{
					this.OnLastUpdateByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateBy = value;
					this.SendPropertyChanged("LastUpdateBy");
					this.OnLastUpdateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vBeat_ContractsBeat", Storage="_ContractsBeats", ThisKey="BeatID", OtherKey="BeatID")]
		public EntitySet<ContractsBeat> ContractsBeats
		{
			get
			{
				return this._ContractsBeats;
			}
			set
			{
				this._ContractsBeats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeatBeatSchedule_vBeat", Storage="_BeatBeatSchedule", ThisKey="BeatID", OtherKey="BeatID", IsForeignKey=true)]
		public BeatBeatSchedule BeatBeatSchedule
		{
			get
			{
				return this._BeatBeatSchedule.Entity;
			}
			set
			{
				BeatBeatSchedule previousValue = this._BeatBeatSchedule.Entity;
				if (((previousValue != value) 
							|| (this._BeatBeatSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BeatBeatSchedule.Entity = null;
						previousValue.vBeats.Remove(this);
					}
					this._BeatBeatSchedule.Entity = value;
					if ((value != null))
					{
						value.vBeats.Add(this);
						this._BeatID = value.BeatID;
					}
					else
					{
						this._BeatID = default(System.Guid);
					}
					this.SendPropertyChanged("BeatBeatSchedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractsBeats(ContractsBeat entity)
		{
			this.SendPropertyChanging();
			entity.vBeat = this;
		}
		
		private void detach_ContractsBeats(ContractsBeat entity)
		{
			this.SendPropertyChanging();
			entity.vBeat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vDropZones")]
	public partial class vDropZone
	{
		
		private System.Guid _DropZoneID;
		
		private string _Location;
		
		private string _Comments;
		
		private string _Restrictions;
		
		private string _DropZoneNumber;
		
		private string _DropZoneDescription;
		
		private string _City;
		
		private string _PDPhoneNumber;
		
		private int _Capacity;
		
		private string _Position;
		
		public vDropZone()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DropZoneID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DropZoneID
		{
			get
			{
				return this._DropZoneID;
			}
			set
			{
				if ((this._DropZoneID != value))
				{
					this._DropZoneID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this._Location = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Restrictions", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Restrictions
		{
			get
			{
				return this._Restrictions;
			}
			set
			{
				if ((this._Restrictions != value))
				{
					this._Restrictions = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DropZoneNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DropZoneNumber
		{
			get
			{
				return this._DropZoneNumber;
			}
			set
			{
				if ((this._DropZoneNumber != value))
				{
					this._DropZoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DropZoneDescription", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string DropZoneDescription
		{
			get
			{
				return this._DropZoneDescription;
			}
			set
			{
				if ((this._DropZoneDescription != value))
				{
					this._DropZoneDescription = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDPhoneNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PDPhoneNumber
		{
			get
			{
				return this._PDPhoneNumber;
			}
			set
			{
				if ((this._PDPhoneNumber != value))
				{
					this._PDPhoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this._Capacity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(MAX)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this._Position = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _Password;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _Email;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _PhoneNumber;
		
		private System.Nullable<bool> _WantsNotification;
		
		private System.Nullable<double> _HourlyCost;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _LastLoginDate;
		
		private System.Nullable<System.DateTime> _LastActivityDate;
		
		private System.Nullable<bool> _IsApproved;
		
		private System.Guid _RoleID;
		
		private System.Nullable<System.Guid> _ContractorID;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnWantsNotificationChanging(System.Nullable<bool> value);
    partial void OnWantsNotificationChanged();
    partial void OnHourlyCostChanging(System.Nullable<double> value);
    partial void OnHourlyCostChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnLastLoginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginDateChanged();
    partial void OnLastActivityDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActivityDateChanged();
    partial void OnIsApprovedChanging(System.Nullable<bool> value);
    partial void OnIsApprovedChanged();
    partial void OnRoleIDChanging(System.Guid value);
    partial void OnRoleIDChanged();
    partial void OnContractorIDChanging(System.Nullable<System.Guid> value);
    partial void OnContractorIDChanged();
    #endregion
		
		public User()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Char(2)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WantsNotification", DbType="Bit")]
		public System.Nullable<bool> WantsNotification
		{
			get
			{
				return this._WantsNotification;
			}
			set
			{
				if ((this._WantsNotification != value))
				{
					this.OnWantsNotificationChanging(value);
					this.SendPropertyChanging();
					this._WantsNotification = value;
					this.SendPropertyChanged("WantsNotification");
					this.OnWantsNotificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourlyCost", DbType="Float")]
		public System.Nullable<double> HourlyCost
		{
			get
			{
				return this._HourlyCost;
			}
			set
			{
				if ((this._HourlyCost != value))
				{
					this.OnHourlyCostChanging(value);
					this.SendPropertyChanging();
					this._HourlyCost = value;
					this.SendPropertyChanged("HourlyCost");
					this.OnHourlyCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit")]
		public System.Nullable<bool> IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TruckStates")]
	public partial class TruckState
	{
		
		private System.Guid _TruckStateID;
		
		private string _TruckState1;
		
		private string _TruckIcon;
		
		public TruckState()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TruckStateID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TruckStateID
		{
			get
			{
				return this._TruckStateID;
			}
			set
			{
				if ((this._TruckStateID != value))
				{
					this._TruckStateID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TruckState", Storage="_TruckState1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TruckState1
		{
			get
			{
				return this._TruckState1;
			}
			set
			{
				if ((this._TruckState1 != value))
				{
					this._TruckState1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TruckIcon", DbType="VarChar(100)")]
		public string TruckIcon
		{
			get
			{
				return this._TruckIcon;
			}
			set
			{
				if ((this._TruckIcon != value))
				{
					this._TruckIcon = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractsBeats")]
	public partial class ContractsBeat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContractID;
		
		private System.Guid _BeatID;
		
		private EntityRef<Contract> _Contract;
		
		private EntityRef<vBeat> _vBeat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(System.Guid value);
    partial void OnContractIDChanged();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    #endregion
		
		public ContractsBeat()
		{
			this._Contract = default(EntityRef<Contract>);
			this._vBeat = default(EntityRef<vBeat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					if (this._Contract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					if (this._vBeat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_ContractsBeat", Storage="_Contract", ThisKey="ContractID", OtherKey="ContractID", IsForeignKey=true)]
		public Contract Contract
		{
			get
			{
				return this._Contract.Entity;
			}
			set
			{
				Contract previousValue = this._Contract.Entity;
				if (((previousValue != value) 
							|| (this._Contract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contract.Entity = null;
						previousValue.ContractsBeats.Remove(this);
					}
					this._Contract.Entity = value;
					if ((value != null))
					{
						value.ContractsBeats.Add(this);
						this._ContractID = value.ContractID;
					}
					else
					{
						this._ContractID = default(System.Guid);
					}
					this.SendPropertyChanged("Contract");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="vBeat_ContractsBeat", Storage="_vBeat", ThisKey="BeatID", OtherKey="BeatID", IsForeignKey=true)]
		public vBeat vBeat
		{
			get
			{
				return this._vBeat.Entity;
			}
			set
			{
				vBeat previousValue = this._vBeat.Entity;
				if (((previousValue != value) 
							|| (this._vBeat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._vBeat.Entity = null;
						previousValue.ContractsBeats.Remove(this);
					}
					this._vBeat.Entity = value;
					if ((value != null))
					{
						value.ContractsBeats.Add(this);
						this._BeatID = value.BeatID;
					}
					else
					{
						this._BeatID = default(System.Guid);
					}
					this.SendPropertyChanged("vBeat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contracts")]
	public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ContractID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private decimal _MaxObligation;
		
		private string _AgreementNumber;
		
		private System.Guid _BeatID;
		
		private System.Guid _ContractorID;
		
		private EntitySet<ContractsBeat> _ContractsBeats;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContractIDChanging(System.Guid value);
    partial void OnContractIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnMaxObligationChanging(decimal value);
    partial void OnMaxObligationChanged();
    partial void OnAgreementNumberChanging(string value);
    partial void OnAgreementNumberChanged();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    #endregion
		
		public Contract()
		{
			this._ContractsBeats = new EntitySet<ContractsBeat>(new Action<ContractsBeat>(this.attach_ContractsBeats), new Action<ContractsBeat>(this.detach_ContractsBeats));
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContractID
		{
			get
			{
				return this._ContractID;
			}
			set
			{
				if ((this._ContractID != value))
				{
					this.OnContractIDChanging(value);
					this.SendPropertyChanging();
					this._ContractID = value;
					this.SendPropertyChanged("ContractID");
					this.OnContractIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxObligation", DbType="Money NOT NULL")]
		public decimal MaxObligation
		{
			get
			{
				return this._MaxObligation;
			}
			set
			{
				if ((this._MaxObligation != value))
				{
					this.OnMaxObligationChanging(value);
					this.SendPropertyChanging();
					this._MaxObligation = value;
					this.SendPropertyChanged("MaxObligation");
					this.OnMaxObligationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreementNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AgreementNumber
		{
			get
			{
				return this._AgreementNumber;
			}
			set
			{
				if ((this._AgreementNumber != value))
				{
					this.OnAgreementNumberChanging(value);
					this.SendPropertyChanging();
					this._AgreementNumber = value;
					this.SendPropertyChanged("AgreementNumber");
					this.OnAgreementNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contract_ContractsBeat", Storage="_ContractsBeats", ThisKey="ContractID", OtherKey="ContractID")]
		public EntitySet<ContractsBeat> ContractsBeats
		{
			get
			{
				return this._ContractsBeats;
			}
			set
			{
				this._ContractsBeats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Contract", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ContractorID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.Contracts.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.Contracts.Add(this);
						this._ContractorID = value.ContractorID;
					}
					else
					{
						this._ContractorID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractsBeats(ContractsBeat entity)
		{
			this.SendPropertyChanging();
			entity.Contract = this;
		}
		
		private void detach_ContractsBeats(ContractsBeat entity)
		{
			this.SendPropertyChanging();
			entity.Contract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drivers")]
	public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DriverID;
		
		private System.Guid _ContractorID;
		
		private string _LastName;
		
		private string _FirstName;
		
		private string _FSPIDNumber;
		
		private System.DateTime _ProgramStartDate;
		
		private System.Nullable<System.DateTime> _TrainingCompletionDate;
		
		private System.DateTime _DOB;
		
		private System.DateTime _LicenseExpirationDate;
		
		private System.DateTime _DL64ExpirationDate;
		
		private System.DateTime _MedicalCardExpirationDate;
		
		private System.Nullable<System.DateTime> _LastPullNoticeDate;
		
		private System.DateTime _DateAdded;
		
		private string _UDF;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _ContractorEndDate;
		
		private System.Nullable<System.DateTime> _ProgramEndDate;
		
		private System.Nullable<System.DateTime> _ContractorStartDate;
		
		private System.Nullable<System.Guid> _BeatID;
		
		private string _Password;
		
		private string _DL64Number;
		
		private string _DriversLicenseNumber;
		
		private System.Nullable<System.DateTime> _AddedtoC3Database;
		
		private bool _IsActive;
		
		private EntitySet<DriverDailySchedule> _DriverDailySchedules;
		
		private EntitySet<DriverInteraction> _DriverInteractions;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverIDChanging(System.Guid value);
    partial void OnDriverIDChanged();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnFSPIDNumberChanging(string value);
    partial void OnFSPIDNumberChanged();
    partial void OnProgramStartDateChanging(System.DateTime value);
    partial void OnProgramStartDateChanged();
    partial void OnTrainingCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTrainingCompletionDateChanged();
    partial void OnDOBChanging(System.DateTime value);
    partial void OnDOBChanged();
    partial void OnLicenseExpirationDateChanging(System.DateTime value);
    partial void OnLicenseExpirationDateChanged();
    partial void OnDL64ExpirationDateChanging(System.DateTime value);
    partial void OnDL64ExpirationDateChanged();
    partial void OnMedicalCardExpirationDateChanging(System.DateTime value);
    partial void OnMedicalCardExpirationDateChanged();
    partial void OnLastPullNoticeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPullNoticeDateChanged();
    partial void OnDateAddedChanging(System.DateTime value);
    partial void OnDateAddedChanged();
    partial void OnUDFChanging(string value);
    partial void OnUDFChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnContractorEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractorEndDateChanged();
    partial void OnProgramEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProgramEndDateChanged();
    partial void OnContractorStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnContractorStartDateChanged();
    partial void OnBeatIDChanging(System.Nullable<System.Guid> value);
    partial void OnBeatIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDL64NumberChanging(string value);
    partial void OnDL64NumberChanged();
    partial void OnDriversLicenseNumberChanging(string value);
    partial void OnDriversLicenseNumberChanged();
    partial void OnAddedtoC3DatabaseChanging(System.Nullable<System.DateTime> value);
    partial void OnAddedtoC3DatabaseChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Driver()
		{
			this._DriverDailySchedules = new EntitySet<DriverDailySchedule>(new Action<DriverDailySchedule>(this.attach_DriverDailySchedules), new Action<DriverDailySchedule>(this.detach_DriverDailySchedules));
			this._DriverInteractions = new EntitySet<DriverInteraction>(new Action<DriverInteraction>(this.attach_DriverInteractions), new Action<DriverInteraction>(this.detach_DriverInteractions));
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSPIDNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FSPIDNumber
		{
			get
			{
				return this._FSPIDNumber;
			}
			set
			{
				if ((this._FSPIDNumber != value))
				{
					this.OnFSPIDNumberChanging(value);
					this.SendPropertyChanging();
					this._FSPIDNumber = value;
					this.SendPropertyChanged("FSPIDNumber");
					this.OnFSPIDNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramStartDate", DbType="Date NOT NULL")]
		public System.DateTime ProgramStartDate
		{
			get
			{
				return this._ProgramStartDate;
			}
			set
			{
				if ((this._ProgramStartDate != value))
				{
					this.OnProgramStartDateChanging(value);
					this.SendPropertyChanging();
					this._ProgramStartDate = value;
					this.SendPropertyChanged("ProgramStartDate");
					this.OnProgramStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingCompletionDate", DbType="Date")]
		public System.Nullable<System.DateTime> TrainingCompletionDate
		{
			get
			{
				return this._TrainingCompletionDate;
			}
			set
			{
				if ((this._TrainingCompletionDate != value))
				{
					this.OnTrainingCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._TrainingCompletionDate = value;
					this.SendPropertyChanged("TrainingCompletionDate");
					this.OnTrainingCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date NOT NULL")]
		public System.DateTime DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime LicenseExpirationDate
		{
			get
			{
				return this._LicenseExpirationDate;
			}
			set
			{
				if ((this._LicenseExpirationDate != value))
				{
					this.OnLicenseExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._LicenseExpirationDate = value;
					this.SendPropertyChanged("LicenseExpirationDate");
					this.OnLicenseExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DL64ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime DL64ExpirationDate
		{
			get
			{
				return this._DL64ExpirationDate;
			}
			set
			{
				if ((this._DL64ExpirationDate != value))
				{
					this.OnDL64ExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._DL64ExpirationDate = value;
					this.SendPropertyChanged("DL64ExpirationDate");
					this.OnDL64ExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalCardExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime MedicalCardExpirationDate
		{
			get
			{
				return this._MedicalCardExpirationDate;
			}
			set
			{
				if ((this._MedicalCardExpirationDate != value))
				{
					this.OnMedicalCardExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._MedicalCardExpirationDate = value;
					this.SendPropertyChanged("MedicalCardExpirationDate");
					this.OnMedicalCardExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPullNoticeDate", DbType="Date")]
		public System.Nullable<System.DateTime> LastPullNoticeDate
		{
			get
			{
				return this._LastPullNoticeDate;
			}
			set
			{
				if ((this._LastPullNoticeDate != value))
				{
					this.OnLastPullNoticeDateChanging(value);
					this.SendPropertyChanging();
					this._LastPullNoticeDate = value;
					this.SendPropertyChanged("LastPullNoticeDate");
					this.OnLastPullNoticeDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="Date NOT NULL")]
		public System.DateTime DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDF", DbType="VarChar(500)")]
		public string UDF
		{
			get
			{
				return this._UDF;
			}
			set
			{
				if ((this._UDF != value))
				{
					this.OnUDFChanging(value);
					this.SendPropertyChanging();
					this._UDF = value;
					this.SendPropertyChanged("UDF");
					this.OnUDFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> ContractorEndDate
		{
			get
			{
				return this._ContractorEndDate;
			}
			set
			{
				if ((this._ContractorEndDate != value))
				{
					this.OnContractorEndDateChanging(value);
					this.SendPropertyChanging();
					this._ContractorEndDate = value;
					this.SendPropertyChanged("ContractorEndDate");
					this.OnContractorEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> ProgramEndDate
		{
			get
			{
				return this._ProgramEndDate;
			}
			set
			{
				if ((this._ProgramEndDate != value))
				{
					this.OnProgramEndDateChanging(value);
					this.SendPropertyChanging();
					this._ProgramEndDate = value;
					this.SendPropertyChanged("ProgramEndDate");
					this.OnProgramEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorStartDate", DbType="Date")]
		public System.Nullable<System.DateTime> ContractorStartDate
		{
			get
			{
				return this._ContractorStartDate;
			}
			set
			{
				if ((this._ContractorStartDate != value))
				{
					this.OnContractorStartDateChanging(value);
					this.SendPropertyChanging();
					this._ContractorStartDate = value;
					this.SendPropertyChanged("ContractorStartDate");
					this.OnContractorStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DL64Number", DbType="NVarChar(50)")]
		public string DL64Number
		{
			get
			{
				return this._DL64Number;
			}
			set
			{
				if ((this._DL64Number != value))
				{
					this.OnDL64NumberChanging(value);
					this.SendPropertyChanging();
					this._DL64Number = value;
					this.SendPropertyChanged("DL64Number");
					this.OnDL64NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriversLicenseNumber", DbType="NVarChar(50)")]
		public string DriversLicenseNumber
		{
			get
			{
				return this._DriversLicenseNumber;
			}
			set
			{
				if ((this._DriversLicenseNumber != value))
				{
					this.OnDriversLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._DriversLicenseNumber = value;
					this.SendPropertyChanged("DriversLicenseNumber");
					this.OnDriversLicenseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedtoC3Database", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddedtoC3Database
		{
			get
			{
				return this._AddedtoC3Database;
			}
			set
			{
				if ((this._AddedtoC3Database != value))
				{
					this.OnAddedtoC3DatabaseChanging(value);
					this.SendPropertyChanging();
					this._AddedtoC3Database = value;
					this.SendPropertyChanged("AddedtoC3Database");
					this.OnAddedtoC3DatabaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DriverDailySchedule", Storage="_DriverDailySchedules", ThisKey="DriverID", OtherKey="DriverID")]
		public EntitySet<DriverDailySchedule> DriverDailySchedules
		{
			get
			{
				return this._DriverDailySchedules;
			}
			set
			{
				this._DriverDailySchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DriverInteraction", Storage="_DriverInteractions", ThisKey="DriverID", OtherKey="DriverID")]
		public EntitySet<DriverInteraction> DriverInteractions
		{
			get
			{
				return this._DriverInteractions;
			}
			set
			{
				this._DriverInteractions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Driver", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ContractorID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._ContractorID = value.ContractorID;
					}
					else
					{
						this._ContractorID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DriverDailySchedules(DriverDailySchedule entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_DriverDailySchedules(DriverDailySchedule entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
		
		private void attach_DriverInteractions(DriverInteraction entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_DriverInteractions(DriverInteraction entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FleetVehicles")]
	public partial class FleetVehicle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FleetVehicleID;
		
		private System.Guid _ContractorID;
		
		private System.DateTime _ProgramStartDate;
		
		private string _FleetNumber;
		
		private string _VehicleType;
		
		private int _VehicleYear;
		
		private string _VehicleMake;
		
		private string _VehicleModel;
		
		private string _VIN;
		
		private string _LicensePlate;
		
		private System.DateTime _RegistrationExpireDate;
		
		private System.DateTime _InsuranceExpireDate;
		
		private System.DateTime _LastCHPInspection;
		
		private string _Comments;
		
		private System.DateTime _ProgramEndDate;
		
		private int _FAW;
		
		private int _RAW;
		
		private int _RAWR;
		
		private int _GVW;
		
		private int _GVWR;
		
		private int _Wheelbase;
		
		private int _Overhang;
		
		private int _MAXTW;
		
		private System.DateTime _MAXTWCALCDATE;
		
		private string _FuelType;
		
		private string _VehicleNumber;
		
		private string _IPAddress;
		
		private string _AgreementNumber;
		
		private EntitySet<CHPInspection> _CHPInspections;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFleetVehicleIDChanging(System.Guid value);
    partial void OnFleetVehicleIDChanged();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    partial void OnProgramStartDateChanging(System.DateTime value);
    partial void OnProgramStartDateChanged();
    partial void OnFleetNumberChanging(string value);
    partial void OnFleetNumberChanged();
    partial void OnVehicleTypeChanging(string value);
    partial void OnVehicleTypeChanged();
    partial void OnVehicleYearChanging(int value);
    partial void OnVehicleYearChanged();
    partial void OnVehicleMakeChanging(string value);
    partial void OnVehicleMakeChanged();
    partial void OnVehicleModelChanging(string value);
    partial void OnVehicleModelChanged();
    partial void OnVINChanging(string value);
    partial void OnVINChanged();
    partial void OnLicensePlateChanging(string value);
    partial void OnLicensePlateChanged();
    partial void OnRegistrationExpireDateChanging(System.DateTime value);
    partial void OnRegistrationExpireDateChanged();
    partial void OnInsuranceExpireDateChanging(System.DateTime value);
    partial void OnInsuranceExpireDateChanged();
    partial void OnLastCHPInspectionChanging(System.DateTime value);
    partial void OnLastCHPInspectionChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnProgramEndDateChanging(System.DateTime value);
    partial void OnProgramEndDateChanged();
    partial void OnFAWChanging(int value);
    partial void OnFAWChanged();
    partial void OnRAWChanging(int value);
    partial void OnRAWChanged();
    partial void OnRAWRChanging(int value);
    partial void OnRAWRChanged();
    partial void OnGVWChanging(int value);
    partial void OnGVWChanged();
    partial void OnGVWRChanging(int value);
    partial void OnGVWRChanged();
    partial void OnWheelbaseChanging(int value);
    partial void OnWheelbaseChanged();
    partial void OnOverhangChanging(int value);
    partial void OnOverhangChanged();
    partial void OnMAXTWChanging(int value);
    partial void OnMAXTWChanged();
    partial void OnMAXTWCALCDATEChanging(System.DateTime value);
    partial void OnMAXTWCALCDATEChanged();
    partial void OnFuelTypeChanging(string value);
    partial void OnFuelTypeChanged();
    partial void OnVehicleNumberChanging(string value);
    partial void OnVehicleNumberChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnAgreementNumberChanging(string value);
    partial void OnAgreementNumberChanged();
    #endregion
		
		public FleetVehicle()
		{
			this._CHPInspections = new EntitySet<CHPInspection>(new Action<CHPInspection>(this.attach_CHPInspections), new Action<CHPInspection>(this.detach_CHPInspections));
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetVehicleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FleetVehicleID
		{
			get
			{
				return this._FleetVehicleID;
			}
			set
			{
				if ((this._FleetVehicleID != value))
				{
					this.OnFleetVehicleIDChanging(value);
					this.SendPropertyChanging();
					this._FleetVehicleID = value;
					this.SendPropertyChanged("FleetVehicleID");
					this.OnFleetVehicleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramStartDate", DbType="Date NOT NULL")]
		public System.DateTime ProgramStartDate
		{
			get
			{
				return this._ProgramStartDate;
			}
			set
			{
				if ((this._ProgramStartDate != value))
				{
					this.OnProgramStartDateChanging(value);
					this.SendPropertyChanging();
					this._ProgramStartDate = value;
					this.SendPropertyChanged("ProgramStartDate");
					this.OnProgramStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FleetNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FleetNumber
		{
			get
			{
				return this._FleetNumber;
			}
			set
			{
				if ((this._FleetNumber != value))
				{
					this.OnFleetNumberChanging(value);
					this.SendPropertyChanging();
					this._FleetNumber = value;
					this.SendPropertyChanged("FleetNumber");
					this.OnFleetNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleType
		{
			get
			{
				return this._VehicleType;
			}
			set
			{
				if ((this._VehicleType != value))
				{
					this.OnVehicleTypeChanging(value);
					this.SendPropertyChanging();
					this._VehicleType = value;
					this.SendPropertyChanged("VehicleType");
					this.OnVehicleTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleYear", DbType="Int NOT NULL")]
		public int VehicleYear
		{
			get
			{
				return this._VehicleYear;
			}
			set
			{
				if ((this._VehicleYear != value))
				{
					this.OnVehicleYearChanging(value);
					this.SendPropertyChanging();
					this._VehicleYear = value;
					this.SendPropertyChanged("VehicleYear");
					this.OnVehicleYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleMake", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleMake
		{
			get
			{
				return this._VehicleMake;
			}
			set
			{
				if ((this._VehicleMake != value))
				{
					this.OnVehicleMakeChanging(value);
					this.SendPropertyChanging();
					this._VehicleMake = value;
					this.SendPropertyChanged("VehicleMake");
					this.OnVehicleMakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleModel", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VehicleModel
		{
			get
			{
				return this._VehicleModel;
			}
			set
			{
				if ((this._VehicleModel != value))
				{
					this.OnVehicleModelChanging(value);
					this.SendPropertyChanging();
					this._VehicleModel = value;
					this.SendPropertyChanged("VehicleModel");
					this.OnVehicleModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIN", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VIN
		{
			get
			{
				return this._VIN;
			}
			set
			{
				if ((this._VIN != value))
				{
					this.OnVINChanging(value);
					this.SendPropertyChanging();
					this._VIN = value;
					this.SendPropertyChanged("VIN");
					this.OnVINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensePlate", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string LicensePlate
		{
			get
			{
				return this._LicensePlate;
			}
			set
			{
				if ((this._LicensePlate != value))
				{
					this.OnLicensePlateChanging(value);
					this.SendPropertyChanging();
					this._LicensePlate = value;
					this.SendPropertyChanged("LicensePlate");
					this.OnLicensePlateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationExpireDate", DbType="Date NOT NULL")]
		public System.DateTime RegistrationExpireDate
		{
			get
			{
				return this._RegistrationExpireDate;
			}
			set
			{
				if ((this._RegistrationExpireDate != value))
				{
					this.OnRegistrationExpireDateChanging(value);
					this.SendPropertyChanging();
					this._RegistrationExpireDate = value;
					this.SendPropertyChanged("RegistrationExpireDate");
					this.OnRegistrationExpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceExpireDate", DbType="Date NOT NULL")]
		public System.DateTime InsuranceExpireDate
		{
			get
			{
				return this._InsuranceExpireDate;
			}
			set
			{
				if ((this._InsuranceExpireDate != value))
				{
					this.OnInsuranceExpireDateChanging(value);
					this.SendPropertyChanging();
					this._InsuranceExpireDate = value;
					this.SendPropertyChanged("InsuranceExpireDate");
					this.OnInsuranceExpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCHPInspection", DbType="Date NOT NULL")]
		public System.DateTime LastCHPInspection
		{
			get
			{
				return this._LastCHPInspection;
			}
			set
			{
				if ((this._LastCHPInspection != value))
				{
					this.OnLastCHPInspectionChanging(value);
					this.SendPropertyChanging();
					this._LastCHPInspection = value;
					this.SendPropertyChanged("LastCHPInspection");
					this.OnLastCHPInspectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramEndDate", DbType="Date NOT NULL")]
		public System.DateTime ProgramEndDate
		{
			get
			{
				return this._ProgramEndDate;
			}
			set
			{
				if ((this._ProgramEndDate != value))
				{
					this.OnProgramEndDateChanging(value);
					this.SendPropertyChanging();
					this._ProgramEndDate = value;
					this.SendPropertyChanged("ProgramEndDate");
					this.OnProgramEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FAW", DbType="Int NOT NULL")]
		public int FAW
		{
			get
			{
				return this._FAW;
			}
			set
			{
				if ((this._FAW != value))
				{
					this.OnFAWChanging(value);
					this.SendPropertyChanging();
					this._FAW = value;
					this.SendPropertyChanged("FAW");
					this.OnFAWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAW", DbType="Int NOT NULL")]
		public int RAW
		{
			get
			{
				return this._RAW;
			}
			set
			{
				if ((this._RAW != value))
				{
					this.OnRAWChanging(value);
					this.SendPropertyChanging();
					this._RAW = value;
					this.SendPropertyChanged("RAW");
					this.OnRAWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RAWR", DbType="Int NOT NULL")]
		public int RAWR
		{
			get
			{
				return this._RAWR;
			}
			set
			{
				if ((this._RAWR != value))
				{
					this.OnRAWRChanging(value);
					this.SendPropertyChanging();
					this._RAWR = value;
					this.SendPropertyChanged("RAWR");
					this.OnRAWRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GVW", DbType="Int NOT NULL")]
		public int GVW
		{
			get
			{
				return this._GVW;
			}
			set
			{
				if ((this._GVW != value))
				{
					this.OnGVWChanging(value);
					this.SendPropertyChanging();
					this._GVW = value;
					this.SendPropertyChanged("GVW");
					this.OnGVWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GVWR", DbType="Int NOT NULL")]
		public int GVWR
		{
			get
			{
				return this._GVWR;
			}
			set
			{
				if ((this._GVWR != value))
				{
					this.OnGVWRChanging(value);
					this.SendPropertyChanging();
					this._GVWR = value;
					this.SendPropertyChanged("GVWR");
					this.OnGVWRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wheelbase", DbType="Int NOT NULL")]
		public int Wheelbase
		{
			get
			{
				return this._Wheelbase;
			}
			set
			{
				if ((this._Wheelbase != value))
				{
					this.OnWheelbaseChanging(value);
					this.SendPropertyChanging();
					this._Wheelbase = value;
					this.SendPropertyChanged("Wheelbase");
					this.OnWheelbaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Overhang", DbType="Int NOT NULL")]
		public int Overhang
		{
			get
			{
				return this._Overhang;
			}
			set
			{
				if ((this._Overhang != value))
				{
					this.OnOverhangChanging(value);
					this.SendPropertyChanging();
					this._Overhang = value;
					this.SendPropertyChanged("Overhang");
					this.OnOverhangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAXTW", DbType="Int NOT NULL")]
		public int MAXTW
		{
			get
			{
				return this._MAXTW;
			}
			set
			{
				if ((this._MAXTW != value))
				{
					this.OnMAXTWChanging(value);
					this.SendPropertyChanging();
					this._MAXTW = value;
					this.SendPropertyChanged("MAXTW");
					this.OnMAXTWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAXTWCALCDATE", DbType="Date NOT NULL")]
		public System.DateTime MAXTWCALCDATE
		{
			get
			{
				return this._MAXTWCALCDATE;
			}
			set
			{
				if ((this._MAXTWCALCDATE != value))
				{
					this.OnMAXTWCALCDATEChanging(value);
					this.SendPropertyChanging();
					this._MAXTWCALCDATE = value;
					this.SendPropertyChanged("MAXTWCALCDATE");
					this.OnMAXTWCALCDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FuelType
		{
			get
			{
				return this._FuelType;
			}
			set
			{
				if ((this._FuelType != value))
				{
					this.OnFuelTypeChanging(value);
					this.SendPropertyChanging();
					this._FuelType = value;
					this.SendPropertyChanged("FuelType");
					this.OnFuelTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleNumber", DbType="VarChar(12) NOT NULL", CanBeNull=false)]
		public string VehicleNumber
		{
			get
			{
				return this._VehicleNumber;
			}
			set
			{
				if ((this._VehicleNumber != value))
				{
					this.OnVehicleNumberChanging(value);
					this.SendPropertyChanging();
					this._VehicleNumber = value;
					this.SendPropertyChanged("VehicleNumber");
					this.OnVehicleNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreementNumber", DbType="VarChar(50)")]
		public string AgreementNumber
		{
			get
			{
				return this._AgreementNumber;
			}
			set
			{
				if ((this._AgreementNumber != value))
				{
					this.OnAgreementNumberChanging(value);
					this.SendPropertyChanging();
					this._AgreementNumber = value;
					this.SendPropertyChanged("AgreementNumber");
					this.OnAgreementNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FleetVehicle_CHPInspection", Storage="_CHPInspections", ThisKey="FleetVehicleID", OtherKey="FleetVehicleID")]
		public EntitySet<CHPInspection> CHPInspections
		{
			get
			{
				return this._CHPInspections;
			}
			set
			{
				this._CHPInspections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_FleetVehicle", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ContractorID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.FleetVehicles.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.FleetVehicles.Add(this);
						this._ContractorID = value.ContractorID;
					}
					else
					{
						this._ContractorID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CHPInspections(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.FleetVehicle = this;
		}
		
		private void detach_CHPInspections(CHPInspection entity)
		{
			this.SendPropertyChanging();
			entity.FleetVehicle = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DriverInteractions")]
	public partial class DriverInteraction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _InteractionID;
		
		private System.Guid _ContractorID;
		
		private System.Guid _DriverID;
		
		private System.Guid _InteractionTypeID;
		
		private string _InteractionArea;
		
		private string _InteractionDescription;
		
		private bool _InspectionPassFail;
		
		private bool _AccidentPreventable;
		
		private bool _FollowupRequired;
		
		private string _FollowupDescription;
		
		private System.Nullable<System.DateTime> _FollowupDate;
		
		private System.Nullable<System.DateTime> _FollowupCompletionDate;
		
		private string _FollowupComments;
		
		private System.Nullable<System.DateTime> _CloseDate;
		
		private string _BadgeID;
		
		private System.Nullable<System.DateTime> _InteractionDate;
		
		private string _VehicleNumber;
		
		private string _BeatNumber;
		
		private EntityRef<Contractor> _Contractor;
		
		private EntityRef<Driver> _Driver;
		
		private EntityRef<InteractionType> _InteractionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInteractionIDChanging(System.Guid value);
    partial void OnInteractionIDChanged();
    partial void OnContractorIDChanging(System.Guid value);
    partial void OnContractorIDChanged();
    partial void OnDriverIDChanging(System.Guid value);
    partial void OnDriverIDChanged();
    partial void OnInteractionTypeIDChanging(System.Guid value);
    partial void OnInteractionTypeIDChanged();
    partial void OnInteractionAreaChanging(string value);
    partial void OnInteractionAreaChanged();
    partial void OnInteractionDescriptionChanging(string value);
    partial void OnInteractionDescriptionChanged();
    partial void OnInspectionPassFailChanging(bool value);
    partial void OnInspectionPassFailChanged();
    partial void OnAccidentPreventableChanging(bool value);
    partial void OnAccidentPreventableChanged();
    partial void OnFollowupRequiredChanging(bool value);
    partial void OnFollowupRequiredChanged();
    partial void OnFollowupDescriptionChanging(string value);
    partial void OnFollowupDescriptionChanged();
    partial void OnFollowupDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFollowupDateChanged();
    partial void OnFollowupCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFollowupCompletionDateChanged();
    partial void OnFollowupCommentsChanging(string value);
    partial void OnFollowupCommentsChanged();
    partial void OnCloseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCloseDateChanged();
    partial void OnBadgeIDChanging(string value);
    partial void OnBadgeIDChanged();
    partial void OnInteractionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInteractionDateChanged();
    partial void OnVehicleNumberChanging(string value);
    partial void OnVehicleNumberChanged();
    partial void OnBeatNumberChanging(string value);
    partial void OnBeatNumberChanged();
    #endregion
		
		public DriverInteraction()
		{
			this._Contractor = default(EntityRef<Contractor>);
			this._Driver = default(EntityRef<Driver>);
			this._InteractionType = default(EntityRef<InteractionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid InteractionID
		{
			get
			{
				return this._InteractionID;
			}
			set
			{
				if ((this._InteractionID != value))
				{
					this.OnInteractionIDChanging(value);
					this.SendPropertyChanging();
					this._InteractionID = value;
					this.SendPropertyChanged("InteractionID");
					this.OnInteractionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InteractionTypeID
		{
			get
			{
				return this._InteractionTypeID;
			}
			set
			{
				if ((this._InteractionTypeID != value))
				{
					if (this._InteractionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InteractionTypeID = value;
					this.SendPropertyChanged("InteractionTypeID");
					this.OnInteractionTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionArea", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string InteractionArea
		{
			get
			{
				return this._InteractionArea;
			}
			set
			{
				if ((this._InteractionArea != value))
				{
					this.OnInteractionAreaChanging(value);
					this.SendPropertyChanging();
					this._InteractionArea = value;
					this.SendPropertyChanged("InteractionArea");
					this.OnInteractionAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionDescription", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string InteractionDescription
		{
			get
			{
				return this._InteractionDescription;
			}
			set
			{
				if ((this._InteractionDescription != value))
				{
					this.OnInteractionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._InteractionDescription = value;
					this.SendPropertyChanged("InteractionDescription");
					this.OnInteractionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InspectionPassFail", DbType="Bit NOT NULL")]
		public bool InspectionPassFail
		{
			get
			{
				return this._InspectionPassFail;
			}
			set
			{
				if ((this._InspectionPassFail != value))
				{
					this.OnInspectionPassFailChanging(value);
					this.SendPropertyChanging();
					this._InspectionPassFail = value;
					this.SendPropertyChanged("InspectionPassFail");
					this.OnInspectionPassFailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccidentPreventable", DbType="Bit NOT NULL")]
		public bool AccidentPreventable
		{
			get
			{
				return this._AccidentPreventable;
			}
			set
			{
				if ((this._AccidentPreventable != value))
				{
					this.OnAccidentPreventableChanging(value);
					this.SendPropertyChanging();
					this._AccidentPreventable = value;
					this.SendPropertyChanged("AccidentPreventable");
					this.OnAccidentPreventableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowupRequired", DbType="Bit NOT NULL")]
		public bool FollowupRequired
		{
			get
			{
				return this._FollowupRequired;
			}
			set
			{
				if ((this._FollowupRequired != value))
				{
					this.OnFollowupRequiredChanging(value);
					this.SendPropertyChanging();
					this._FollowupRequired = value;
					this.SendPropertyChanged("FollowupRequired");
					this.OnFollowupRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowupDescription", DbType="VarChar(500)")]
		public string FollowupDescription
		{
			get
			{
				return this._FollowupDescription;
			}
			set
			{
				if ((this._FollowupDescription != value))
				{
					this.OnFollowupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FollowupDescription = value;
					this.SendPropertyChanged("FollowupDescription");
					this.OnFollowupDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowupDate", DbType="Date")]
		public System.Nullable<System.DateTime> FollowupDate
		{
			get
			{
				return this._FollowupDate;
			}
			set
			{
				if ((this._FollowupDate != value))
				{
					this.OnFollowupDateChanging(value);
					this.SendPropertyChanging();
					this._FollowupDate = value;
					this.SendPropertyChanged("FollowupDate");
					this.OnFollowupDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowupCompletionDate", DbType="Date")]
		public System.Nullable<System.DateTime> FollowupCompletionDate
		{
			get
			{
				return this._FollowupCompletionDate;
			}
			set
			{
				if ((this._FollowupCompletionDate != value))
				{
					this.OnFollowupCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._FollowupCompletionDate = value;
					this.SendPropertyChanged("FollowupCompletionDate");
					this.OnFollowupCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FollowupComments", DbType="VarChar(500)")]
		public string FollowupComments
		{
			get
			{
				return this._FollowupComments;
			}
			set
			{
				if ((this._FollowupComments != value))
				{
					this.OnFollowupCommentsChanging(value);
					this.SendPropertyChanging();
					this._FollowupComments = value;
					this.SendPropertyChanged("FollowupComments");
					this.OnFollowupCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseDate", DbType="Date")]
		public System.Nullable<System.DateTime> CloseDate
		{
			get
			{
				return this._CloseDate;
			}
			set
			{
				if ((this._CloseDate != value))
				{
					this.OnCloseDateChanging(value);
					this.SendPropertyChanging();
					this._CloseDate = value;
					this.SendPropertyChanged("CloseDate");
					this.OnCloseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BadgeID", DbType="VarChar(50)")]
		public string BadgeID
		{
			get
			{
				return this._BadgeID;
			}
			set
			{
				if ((this._BadgeID != value))
				{
					this.OnBadgeIDChanging(value);
					this.SendPropertyChanging();
					this._BadgeID = value;
					this.SendPropertyChanged("BadgeID");
					this.OnBadgeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> InteractionDate
		{
			get
			{
				return this._InteractionDate;
			}
			set
			{
				if ((this._InteractionDate != value))
				{
					this.OnInteractionDateChanging(value);
					this.SendPropertyChanging();
					this._InteractionDate = value;
					this.SendPropertyChanged("InteractionDate");
					this.OnInteractionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VehicleNumber", DbType="VarChar(50)")]
		public string VehicleNumber
		{
			get
			{
				return this._VehicleNumber;
			}
			set
			{
				if ((this._VehicleNumber != value))
				{
					this.OnVehicleNumberChanging(value);
					this.SendPropertyChanging();
					this._VehicleNumber = value;
					this.SendPropertyChanged("VehicleNumber");
					this.OnVehicleNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatNumber", DbType="VarChar(50)")]
		public string BeatNumber
		{
			get
			{
				return this._BeatNumber;
			}
			set
			{
				if ((this._BeatNumber != value))
				{
					this.OnBeatNumberChanging(value);
					this.SendPropertyChanging();
					this._BeatNumber = value;
					this.SendPropertyChanged("BeatNumber");
					this.OnBeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_DriverInteraction", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ContractorID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.DriverInteractions.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.DriverInteractions.Add(this);
						this._ContractorID = value.ContractorID;
					}
					else
					{
						this._ContractorID = default(System.Guid);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DriverInteraction", Storage="_Driver", ThisKey="DriverID", OtherKey="DriverID", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.DriverInteractions.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.DriverInteractions.Add(this);
						this._DriverID = value.DriverID;
					}
					else
					{
						this._DriverID = default(System.Guid);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionType_DriverInteraction", Storage="_InteractionType", ThisKey="InteractionTypeID", OtherKey="InteractionTypeID", IsForeignKey=true)]
		public InteractionType InteractionType
		{
			get
			{
				return this._InteractionType.Entity;
			}
			set
			{
				InteractionType previousValue = this._InteractionType.Entity;
				if (((previousValue != value) 
							|| (this._InteractionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InteractionType.Entity = null;
						previousValue.DriverInteractions.Remove(this);
					}
					this._InteractionType.Entity = value;
					if ((value != null))
					{
						value.DriverInteractions.Add(this);
						this._InteractionTypeID = value.InteractionTypeID;
					}
					else
					{
						this._InteractionTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("InteractionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.YearlyCalendar")]
	public partial class YearlyCalendar : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DateID;
		
		private string _dayName;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateIDChanging(System.Guid value);
    partial void OnDateIDChanged();
    partial void OndayNameChanging(string value);
    partial void OndayNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public YearlyCalendar()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DateID
		{
			get
			{
				return this._DateID;
			}
			set
			{
				if ((this._DateID != value))
				{
					this.OnDateIDChanging(value);
					this.SendPropertyChanging();
					this._DateID = value;
					this.SendPropertyChanged("DateID");
					this.OnDateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dayName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string dayName
		{
			get
			{
				return this._dayName;
			}
			set
			{
				if ((this._dayName != value))
				{
					this.OndayNameChanging(value);
					this.SendPropertyChanging();
					this._dayName = value;
					this.SendPropertyChanged("dayName");
					this.OndayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vars")]
	public partial class Var : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VarID;
		
		private string _VarName;
		
		private string _VarValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVarIDChanging(System.Guid value);
    partial void OnVarIDChanged();
    partial void OnVarNameChanging(string value);
    partial void OnVarNameChanged();
    partial void OnVarValueChanging(string value);
    partial void OnVarValueChanged();
    #endregion
		
		public Var()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VarID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VarID
		{
			get
			{
				return this._VarID;
			}
			set
			{
				if ((this._VarID != value))
				{
					this.OnVarIDChanging(value);
					this.SendPropertyChanging();
					this._VarID = value;
					this.SendPropertyChanged("VarID");
					this.OnVarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VarName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string VarName
		{
			get
			{
				return this._VarName;
			}
			set
			{
				if ((this._VarName != value))
				{
					this.OnVarNameChanging(value);
					this.SendPropertyChanging();
					this._VarName = value;
					this.SendPropertyChanged("VarName");
					this.OnVarNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VarValue", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string VarValue
		{
			get
			{
				return this._VarValue;
			}
			set
			{
				if ((this._VarValue != value))
				{
					this.OnVarValueChanging(value);
					this.SendPropertyChanging();
					this._VarValue = value;
					this.SendPropertyChanged("VarValue");
					this.OnVarValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeatBeatSchedules")]
	public partial class BeatBeatSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BeatBeatScheduleID;
		
		private System.Guid _BeatID;
		
		private System.Guid _BeatScheduleID;
		
		private EntitySet<vBeat> _vBeats;
		
		private EntityRef<BeatSchedule> _BeatSchedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeatBeatScheduleIDChanging(System.Guid value);
    partial void OnBeatBeatScheduleIDChanged();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    partial void OnBeatScheduleIDChanging(System.Guid value);
    partial void OnBeatScheduleIDChanged();
    #endregion
		
		public BeatBeatSchedule()
		{
			this._vBeats = new EntitySet<vBeat>(new Action<vBeat>(this.attach_vBeats), new Action<vBeat>(this.detach_vBeats));
			this._BeatSchedule = default(EntityRef<BeatSchedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatBeatScheduleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatBeatScheduleID
		{
			get
			{
				return this._BeatBeatScheduleID;
			}
			set
			{
				if ((this._BeatBeatScheduleID != value))
				{
					this.OnBeatBeatScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._BeatBeatScheduleID = value;
					this.SendPropertyChanged("BeatBeatScheduleID");
					this.OnBeatBeatScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatScheduleID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BeatScheduleID
		{
			get
			{
				return this._BeatScheduleID;
			}
			set
			{
				if ((this._BeatScheduleID != value))
				{
					if (this._BeatSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeatScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._BeatScheduleID = value;
					this.SendPropertyChanged("BeatScheduleID");
					this.OnBeatScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeatBeatSchedule_vBeat", Storage="_vBeats", ThisKey="BeatID", OtherKey="BeatID")]
		public EntitySet<vBeat> vBeats
		{
			get
			{
				return this._vBeats;
			}
			set
			{
				this._vBeats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeatSchedule_BeatBeatSchedule", Storage="_BeatSchedule", ThisKey="BeatScheduleID", OtherKey="BeatScheduleID", IsForeignKey=true)]
		public BeatSchedule BeatSchedule
		{
			get
			{
				return this._BeatSchedule.Entity;
			}
			set
			{
				BeatSchedule previousValue = this._BeatSchedule.Entity;
				if (((previousValue != value) 
							|| (this._BeatSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BeatSchedule.Entity = null;
						previousValue.BeatBeatSchedules.Remove(this);
					}
					this._BeatSchedule.Entity = value;
					if ((value != null))
					{
						value.BeatBeatSchedules.Add(this);
						this._BeatScheduleID = value.BeatScheduleID;
					}
					else
					{
						this._BeatScheduleID = default(System.Guid);
					}
					this.SendPropertyChanged("BeatSchedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_vBeats(vBeat entity)
		{
			this.SendPropertyChanging();
			entity.BeatBeatSchedule = this;
		}
		
		private void detach_vBeats(vBeat entity)
		{
			this.SendPropertyChanging();
			entity.BeatBeatSchedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DailyBeatSchedules")]
	public partial class DailyBeatSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.DateTime _RunDate;
		
		private string _BeatNumber;
		
		private string _ScheduleName;
		
		private string _Supervisor;
		
		private string _OfficePhone;
		
		private string _CellPhone;
		
		private string _ContractorCompany;
		
		private System.Nullable<bool> _Weekday;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRunDateChanging(System.DateTime value);
    partial void OnRunDateChanged();
    partial void OnBeatNumberChanging(string value);
    partial void OnBeatNumberChanged();
    partial void OnScheduleNameChanging(string value);
    partial void OnScheduleNameChanged();
    partial void OnSupervisorChanging(string value);
    partial void OnSupervisorChanged();
    partial void OnOfficePhoneChanging(string value);
    partial void OnOfficePhoneChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnContractorCompanyChanging(string value);
    partial void OnContractorCompanyChanged();
    partial void OnWeekdayChanging(System.Nullable<bool> value);
    partial void OnWeekdayChanged();
    #endregion
		
		public DailyBeatSchedule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunDate", DbType="Date NOT NULL")]
		public System.DateTime RunDate
		{
			get
			{
				return this._RunDate;
			}
			set
			{
				if ((this._RunDate != value))
				{
					this.OnRunDateChanging(value);
					this.SendPropertyChanging();
					this._RunDate = value;
					this.SendPropertyChanged("RunDate");
					this.OnRunDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string BeatNumber
		{
			get
			{
				return this._BeatNumber;
			}
			set
			{
				if ((this._BeatNumber != value))
				{
					this.OnBeatNumberChanging(value);
					this.SendPropertyChanging();
					this._BeatNumber = value;
					this.SendPropertyChanged("BeatNumber");
					this.OnBeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ScheduleName
		{
			get
			{
				return this._ScheduleName;
			}
			set
			{
				if ((this._ScheduleName != value))
				{
					this.OnScheduleNameChanging(value);
					this.SendPropertyChanging();
					this._ScheduleName = value;
					this.SendPropertyChanged("ScheduleName");
					this.OnScheduleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supervisor", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Supervisor
		{
			get
			{
				return this._Supervisor;
			}
			set
			{
				if ((this._Supervisor != value))
				{
					this.OnSupervisorChanging(value);
					this.SendPropertyChanging();
					this._Supervisor = value;
					this.SendPropertyChanged("Supervisor");
					this.OnSupervisorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficePhone", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OfficePhone
		{
			get
			{
				return this._OfficePhone;
			}
			set
			{
				if ((this._OfficePhone != value))
				{
					this.OnOfficePhoneChanging(value);
					this.SendPropertyChanging();
					this._OfficePhone = value;
					this.SendPropertyChanged("OfficePhone");
					this.OnOfficePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorCompany", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ContractorCompany
		{
			get
			{
				return this._ContractorCompany;
			}
			set
			{
				if ((this._ContractorCompany != value))
				{
					this.OnContractorCompanyChanging(value);
					this.SendPropertyChanging();
					this._ContractorCompany = value;
					this.SendPropertyChanged("ContractorCompany");
					this.OnContractorCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weekday", DbType="Bit")]
		public System.Nullable<bool> Weekday
		{
			get
			{
				return this._Weekday;
			}
			set
			{
				if ((this._Weekday != value))
				{
					this.OnWeekdayChanging(value);
					this.SendPropertyChanging();
					this._Weekday = value;
					this.SendPropertyChanged("Weekday");
					this.OnWeekdayChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BeatSchedules")]
	public partial class BeatSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BeatScheduleID;
		
		private string _ScheduleName;
		
		private bool _Weekday;
		
		private System.TimeSpan _Logon;
		
		private System.TimeSpan _RollOut;
		
		private System.TimeSpan _OnPatrol;
		
		private System.TimeSpan _RollIn;
		
		private System.TimeSpan _LogOff;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _BreakDuration;
		
		private EntitySet<BeatBeatSchedule> _BeatBeatSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeatScheduleIDChanging(System.Guid value);
    partial void OnBeatScheduleIDChanged();
    partial void OnScheduleNameChanging(string value);
    partial void OnScheduleNameChanged();
    partial void OnWeekdayChanging(bool value);
    partial void OnWeekdayChanged();
    partial void OnLogonChanging(System.TimeSpan value);
    partial void OnLogonChanged();
    partial void OnRollOutChanging(System.TimeSpan value);
    partial void OnRollOutChanged();
    partial void OnOnPatrolChanging(System.TimeSpan value);
    partial void OnOnPatrolChanged();
    partial void OnRollInChanging(System.TimeSpan value);
    partial void OnRollInChanged();
    partial void OnLogOffChanging(System.TimeSpan value);
    partial void OnLogOffChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnBreakDurationChanging(int value);
    partial void OnBreakDurationChanged();
    #endregion
		
		public BeatSchedule()
		{
			this._BeatBeatSchedules = new EntitySet<BeatBeatSchedule>(new Action<BeatBeatSchedule>(this.attach_BeatBeatSchedules), new Action<BeatBeatSchedule>(this.detach_BeatBeatSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatScheduleID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatScheduleID
		{
			get
			{
				return this._BeatScheduleID;
			}
			set
			{
				if ((this._BeatScheduleID != value))
				{
					this.OnBeatScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._BeatScheduleID = value;
					this.SendPropertyChanged("BeatScheduleID");
					this.OnBeatScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ScheduleName
		{
			get
			{
				return this._ScheduleName;
			}
			set
			{
				if ((this._ScheduleName != value))
				{
					this.OnScheduleNameChanging(value);
					this.SendPropertyChanging();
					this._ScheduleName = value;
					this.SendPropertyChanged("ScheduleName");
					this.OnScheduleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weekday", DbType="Bit NOT NULL")]
		public bool Weekday
		{
			get
			{
				return this._Weekday;
			}
			set
			{
				if ((this._Weekday != value))
				{
					this.OnWeekdayChanging(value);
					this.SendPropertyChanging();
					this._Weekday = value;
					this.SendPropertyChanged("Weekday");
					this.OnWeekdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logon", DbType="Time NOT NULL")]
		public System.TimeSpan Logon
		{
			get
			{
				return this._Logon;
			}
			set
			{
				if ((this._Logon != value))
				{
					this.OnLogonChanging(value);
					this.SendPropertyChanging();
					this._Logon = value;
					this.SendPropertyChanged("Logon");
					this.OnLogonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollOut", DbType="Time NOT NULL")]
		public System.TimeSpan RollOut
		{
			get
			{
				return this._RollOut;
			}
			set
			{
				if ((this._RollOut != value))
				{
					this.OnRollOutChanging(value);
					this.SendPropertyChanging();
					this._RollOut = value;
					this.SendPropertyChanged("RollOut");
					this.OnRollOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnPatrol", DbType="Time NOT NULL")]
		public System.TimeSpan OnPatrol
		{
			get
			{
				return this._OnPatrol;
			}
			set
			{
				if ((this._OnPatrol != value))
				{
					this.OnOnPatrolChanging(value);
					this.SendPropertyChanging();
					this._OnPatrol = value;
					this.SendPropertyChanged("OnPatrol");
					this.OnOnPatrolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RollIn", DbType="Time NOT NULL")]
		public System.TimeSpan RollIn
		{
			get
			{
				return this._RollIn;
			}
			set
			{
				if ((this._RollIn != value))
				{
					this.OnRollInChanging(value);
					this.SendPropertyChanging();
					this._RollIn = value;
					this.SendPropertyChanged("RollIn");
					this.OnRollInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogOff", DbType="Time NOT NULL")]
		public System.TimeSpan LogOff
		{
			get
			{
				return this._LogOff;
			}
			set
			{
				if ((this._LogOff != value))
				{
					this.OnLogOffChanging(value);
					this.SendPropertyChanging();
					this._LogOff = value;
					this.SendPropertyChanged("LogOff");
					this.OnLogOffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BreakDuration", DbType="Int NOT NULL")]
		public int BreakDuration
		{
			get
			{
				return this._BreakDuration;
			}
			set
			{
				if ((this._BreakDuration != value))
				{
					this.OnBreakDurationChanging(value);
					this.SendPropertyChanging();
					this._BreakDuration = value;
					this.SendPropertyChanged("BreakDuration");
					this.OnBreakDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BeatSchedule_BeatBeatSchedule", Storage="_BeatBeatSchedules", ThisKey="BeatScheduleID", OtherKey="BeatScheduleID")]
		public EntitySet<BeatBeatSchedule> BeatBeatSchedules
		{
			get
			{
				return this._BeatBeatSchedules;
			}
			set
			{
				this._BeatBeatSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BeatBeatSchedules(BeatBeatSchedule entity)
		{
			this.SendPropertyChanging();
			entity.BeatSchedule = this;
		}
		
		private void detach_BeatBeatSchedules(BeatBeatSchedule entity)
		{
			this.SendPropertyChanging();
			entity.BeatSchedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AEFrequencies")]
	public partial class AEFrequency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AEFrequencyID;
		
		private string _AEFrequencyName;
		
		private string _AEFrequencyDescription;
		
		private EntitySet<AERecipient> _AERecipients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAEFrequencyIDChanging(System.Guid value);
    partial void OnAEFrequencyIDChanged();
    partial void OnAEFrequencyNameChanging(string value);
    partial void OnAEFrequencyNameChanged();
    partial void OnAEFrequencyDescriptionChanging(string value);
    partial void OnAEFrequencyDescriptionChanged();
    #endregion
		
		public AEFrequency()
		{
			this._AERecipients = new EntitySet<AERecipient>(new Action<AERecipient>(this.attach_AERecipients), new Action<AERecipient>(this.detach_AERecipients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEFrequencyID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AEFrequencyID
		{
			get
			{
				return this._AEFrequencyID;
			}
			set
			{
				if ((this._AEFrequencyID != value))
				{
					this.OnAEFrequencyIDChanging(value);
					this.SendPropertyChanging();
					this._AEFrequencyID = value;
					this.SendPropertyChanged("AEFrequencyID");
					this.OnAEFrequencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEFrequencyName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AEFrequencyName
		{
			get
			{
				return this._AEFrequencyName;
			}
			set
			{
				if ((this._AEFrequencyName != value))
				{
					this.OnAEFrequencyNameChanging(value);
					this.SendPropertyChanging();
					this._AEFrequencyName = value;
					this.SendPropertyChanged("AEFrequencyName");
					this.OnAEFrequencyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEFrequencyDescription", DbType="VarChar(200)")]
		public string AEFrequencyDescription
		{
			get
			{
				return this._AEFrequencyDescription;
			}
			set
			{
				if ((this._AEFrequencyDescription != value))
				{
					this.OnAEFrequencyDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AEFrequencyDescription = value;
					this.SendPropertyChanged("AEFrequencyDescription");
					this.OnAEFrequencyDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AEFrequency_AERecipient", Storage="_AERecipients", ThisKey="AEFrequencyID", OtherKey="AEFrequencyID")]
		public EntitySet<AERecipient> AERecipients
		{
			get
			{
				return this._AERecipients;
			}
			set
			{
				this._AERecipients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AERecipients(AERecipient entity)
		{
			this.SendPropertyChanging();
			entity.AEFrequency = this;
		}
		
		private void detach_AERecipients(AERecipient entity)
		{
			this.SendPropertyChanging();
			entity.AEFrequency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AERecipients")]
	public partial class AERecipient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AERecipientID;
		
		private string _AERecipientEmail;
		
		private bool _AEIsContractor;
		
		private System.Guid _AEReportID;
		
		private System.Guid _AEFrequencyID;
		
		private System.Nullable<System.Guid> _AEContractorID;
		
		private System.Guid _AEReportTypeID;
		
		private EntityRef<AEFrequency> _AEFrequency;
		
		private EntityRef<AEReport> _AEReport;
		
		private EntityRef<AEReportType> _AEReportType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAERecipientIDChanging(System.Guid value);
    partial void OnAERecipientIDChanged();
    partial void OnAERecipientEmailChanging(string value);
    partial void OnAERecipientEmailChanged();
    partial void OnAEIsContractorChanging(bool value);
    partial void OnAEIsContractorChanged();
    partial void OnAEReportIDChanging(System.Guid value);
    partial void OnAEReportIDChanged();
    partial void OnAEFrequencyIDChanging(System.Guid value);
    partial void OnAEFrequencyIDChanged();
    partial void OnAEContractorIDChanging(System.Nullable<System.Guid> value);
    partial void OnAEContractorIDChanged();
    partial void OnAEReportTypeIDChanging(System.Guid value);
    partial void OnAEReportTypeIDChanged();
    #endregion
		
		public AERecipient()
		{
			this._AEFrequency = default(EntityRef<AEFrequency>);
			this._AEReport = default(EntityRef<AEReport>);
			this._AEReportType = default(EntityRef<AEReportType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AERecipientID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AERecipientID
		{
			get
			{
				return this._AERecipientID;
			}
			set
			{
				if ((this._AERecipientID != value))
				{
					this.OnAERecipientIDChanging(value);
					this.SendPropertyChanging();
					this._AERecipientID = value;
					this.SendPropertyChanged("AERecipientID");
					this.OnAERecipientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AERecipientEmail", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string AERecipientEmail
		{
			get
			{
				return this._AERecipientEmail;
			}
			set
			{
				if ((this._AERecipientEmail != value))
				{
					this.OnAERecipientEmailChanging(value);
					this.SendPropertyChanging();
					this._AERecipientEmail = value;
					this.SendPropertyChanged("AERecipientEmail");
					this.OnAERecipientEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEIsContractor", DbType="Bit NOT NULL")]
		public bool AEIsContractor
		{
			get
			{
				return this._AEIsContractor;
			}
			set
			{
				if ((this._AEIsContractor != value))
				{
					this.OnAEIsContractorChanging(value);
					this.SendPropertyChanging();
					this._AEIsContractor = value;
					this.SendPropertyChanged("AEIsContractor");
					this.OnAEIsContractorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEReportID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AEReportID
		{
			get
			{
				return this._AEReportID;
			}
			set
			{
				if ((this._AEReportID != value))
				{
					if (this._AEReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAEReportIDChanging(value);
					this.SendPropertyChanging();
					this._AEReportID = value;
					this.SendPropertyChanged("AEReportID");
					this.OnAEReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEFrequencyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AEFrequencyID
		{
			get
			{
				return this._AEFrequencyID;
			}
			set
			{
				if ((this._AEFrequencyID != value))
				{
					if (this._AEFrequency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAEFrequencyIDChanging(value);
					this.SendPropertyChanging();
					this._AEFrequencyID = value;
					this.SendPropertyChanged("AEFrequencyID");
					this.OnAEFrequencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEContractorID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AEContractorID
		{
			get
			{
				return this._AEContractorID;
			}
			set
			{
				if ((this._AEContractorID != value))
				{
					this.OnAEContractorIDChanging(value);
					this.SendPropertyChanging();
					this._AEContractorID = value;
					this.SendPropertyChanged("AEContractorID");
					this.OnAEContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEReportTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AEReportTypeID
		{
			get
			{
				return this._AEReportTypeID;
			}
			set
			{
				if ((this._AEReportTypeID != value))
				{
					if (this._AEReportType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAEReportTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AEReportTypeID = value;
					this.SendPropertyChanged("AEReportTypeID");
					this.OnAEReportTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AEFrequency_AERecipient", Storage="_AEFrequency", ThisKey="AEFrequencyID", OtherKey="AEFrequencyID", IsForeignKey=true)]
		public AEFrequency AEFrequency
		{
			get
			{
				return this._AEFrequency.Entity;
			}
			set
			{
				AEFrequency previousValue = this._AEFrequency.Entity;
				if (((previousValue != value) 
							|| (this._AEFrequency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AEFrequency.Entity = null;
						previousValue.AERecipients.Remove(this);
					}
					this._AEFrequency.Entity = value;
					if ((value != null))
					{
						value.AERecipients.Add(this);
						this._AEFrequencyID = value.AEFrequencyID;
					}
					else
					{
						this._AEFrequencyID = default(System.Guid);
					}
					this.SendPropertyChanged("AEFrequency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AEReport_AERecipient", Storage="_AEReport", ThisKey="AEReportID", OtherKey="AEReportID", IsForeignKey=true)]
		public AEReport AEReport
		{
			get
			{
				return this._AEReport.Entity;
			}
			set
			{
				AEReport previousValue = this._AEReport.Entity;
				if (((previousValue != value) 
							|| (this._AEReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AEReport.Entity = null;
						previousValue.AERecipients.Remove(this);
					}
					this._AEReport.Entity = value;
					if ((value != null))
					{
						value.AERecipients.Add(this);
						this._AEReportID = value.AEReportID;
					}
					else
					{
						this._AEReportID = default(System.Guid);
					}
					this.SendPropertyChanged("AEReport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AEReportType_AERecipient", Storage="_AEReportType", ThisKey="AEReportTypeID", OtherKey="AEReportTypeID", IsForeignKey=true)]
		public AEReportType AEReportType
		{
			get
			{
				return this._AEReportType.Entity;
			}
			set
			{
				AEReportType previousValue = this._AEReportType.Entity;
				if (((previousValue != value) 
							|| (this._AEReportType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AEReportType.Entity = null;
						previousValue.AERecipients.Remove(this);
					}
					this._AEReportType.Entity = value;
					if ((value != null))
					{
						value.AERecipients.Add(this);
						this._AEReportTypeID = value.AEReportTypeID;
					}
					else
					{
						this._AEReportTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("AEReportType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AEReports")]
	public partial class AEReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AEReportID;
		
		private string _AEReportName;
		
		private string _AEReportDescription;
		
		private EntitySet<AERecipient> _AERecipients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAEReportIDChanging(System.Guid value);
    partial void OnAEReportIDChanged();
    partial void OnAEReportNameChanging(string value);
    partial void OnAEReportNameChanged();
    partial void OnAEReportDescriptionChanging(string value);
    partial void OnAEReportDescriptionChanged();
    #endregion
		
		public AEReport()
		{
			this._AERecipients = new EntitySet<AERecipient>(new Action<AERecipient>(this.attach_AERecipients), new Action<AERecipient>(this.detach_AERecipients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEReportID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AEReportID
		{
			get
			{
				return this._AEReportID;
			}
			set
			{
				if ((this._AEReportID != value))
				{
					this.OnAEReportIDChanging(value);
					this.SendPropertyChanging();
					this._AEReportID = value;
					this.SendPropertyChanged("AEReportID");
					this.OnAEReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEReportName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AEReportName
		{
			get
			{
				return this._AEReportName;
			}
			set
			{
				if ((this._AEReportName != value))
				{
					this.OnAEReportNameChanging(value);
					this.SendPropertyChanging();
					this._AEReportName = value;
					this.SendPropertyChanged("AEReportName");
					this.OnAEReportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEReportDescription", DbType="VarChar(250)")]
		public string AEReportDescription
		{
			get
			{
				return this._AEReportDescription;
			}
			set
			{
				if ((this._AEReportDescription != value))
				{
					this.OnAEReportDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AEReportDescription = value;
					this.SendPropertyChanged("AEReportDescription");
					this.OnAEReportDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AEReport_AERecipient", Storage="_AERecipients", ThisKey="AEReportID", OtherKey="AEReportID")]
		public EntitySet<AERecipient> AERecipients
		{
			get
			{
				return this._AERecipients;
			}
			set
			{
				this._AERecipients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AERecipients(AERecipient entity)
		{
			this.SendPropertyChanging();
			entity.AEReport = this;
		}
		
		private void detach_AERecipients(AERecipient entity)
		{
			this.SendPropertyChanging();
			entity.AEReport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AEReportTypes")]
	public partial class AEReportType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AEReportTypeID;
		
		private string _AEReportTypeName;
		
		private EntitySet<AERecipient> _AERecipients;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAEReportTypeIDChanging(System.Guid value);
    partial void OnAEReportTypeIDChanged();
    partial void OnAEReportTypeNameChanging(string value);
    partial void OnAEReportTypeNameChanged();
    #endregion
		
		public AEReportType()
		{
			this._AERecipients = new EntitySet<AERecipient>(new Action<AERecipient>(this.attach_AERecipients), new Action<AERecipient>(this.detach_AERecipients));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEReportTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AEReportTypeID
		{
			get
			{
				return this._AEReportTypeID;
			}
			set
			{
				if ((this._AEReportTypeID != value))
				{
					this.OnAEReportTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AEReportTypeID = value;
					this.SendPropertyChanged("AEReportTypeID");
					this.OnAEReportTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AEReportTypeName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string AEReportTypeName
		{
			get
			{
				return this._AEReportTypeName;
			}
			set
			{
				if ((this._AEReportTypeName != value))
				{
					this.OnAEReportTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AEReportTypeName = value;
					this.SendPropertyChanged("AEReportTypeName");
					this.OnAEReportTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AEReportType_AERecipient", Storage="_AERecipients", ThisKey="AEReportTypeID", OtherKey="AEReportTypeID")]
		public EntitySet<AERecipient> AERecipients
		{
			get
			{
				return this._AERecipients;
			}
			set
			{
				this._AERecipients.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AERecipients(AERecipient entity)
		{
			this.SendPropertyChanging();
			entity.AEReportType = this;
		}
		
		private void detach_AERecipients(AERecipient entity)
		{
			this.SendPropertyChanging();
			entity.AEReportType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Beats_New")]
	public partial class Beats_New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BeatID;
		
		private bool _Active;
		
		private string _BeatExtent;
		
		private int _FreewayID;
		
		private string _BeatDescription;
		
		private string _BeatNumber;
		
		private System.Nullable<System.DateTime> _LastUpdate;
		
		private string _LastUpdateBy;
		
		private System.Nullable<bool> _IsTemporary;
		
		private string _BeatColor;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeatIDChanging(System.Guid value);
    partial void OnBeatIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnBeatExtentChanging(string value);
    partial void OnBeatExtentChanged();
    partial void OnFreewayIDChanging(int value);
    partial void OnFreewayIDChanged();
    partial void OnBeatDescriptionChanging(string value);
    partial void OnBeatDescriptionChanged();
    partial void OnBeatNumberChanging(string value);
    partial void OnBeatNumberChanged();
    partial void OnLastUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateChanged();
    partial void OnLastUpdateByChanging(string value);
    partial void OnLastUpdateByChanged();
    partial void OnIsTemporaryChanging(System.Nullable<bool> value);
    partial void OnIsTemporaryChanged();
    partial void OnBeatColorChanging(string value);
    partial void OnBeatColorChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public Beats_New()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BeatID
		{
			get
			{
				return this._BeatID;
			}
			set
			{
				if ((this._BeatID != value))
				{
					this.OnBeatIDChanging(value);
					this.SendPropertyChanging();
					this._BeatID = value;
					this.SendPropertyChanged("BeatID");
					this.OnBeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatExtent", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string BeatExtent
		{
			get
			{
				return this._BeatExtent;
			}
			set
			{
				if ((this._BeatExtent != value))
				{
					this.OnBeatExtentChanging(value);
					this.SendPropertyChanging();
					this._BeatExtent = value;
					this.SendPropertyChanged("BeatExtent");
					this.OnBeatExtentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreewayID", DbType="Int NOT NULL")]
		public int FreewayID
		{
			get
			{
				return this._FreewayID;
			}
			set
			{
				if ((this._FreewayID != value))
				{
					this.OnFreewayIDChanging(value);
					this.SendPropertyChanging();
					this._FreewayID = value;
					this.SendPropertyChanged("FreewayID");
					this.OnFreewayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatDescription", DbType="VarChar(500)")]
		public string BeatDescription
		{
			get
			{
				return this._BeatDescription;
			}
			set
			{
				if ((this._BeatDescription != value))
				{
					this.OnBeatDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BeatDescription = value;
					this.SendPropertyChanged("BeatDescription");
					this.OnBeatDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatNumber", DbType="VarChar(50)")]
		public string BeatNumber
		{
			get
			{
				return this._BeatNumber;
			}
			set
			{
				if ((this._BeatNumber != value))
				{
					this.OnBeatNumberChanging(value);
					this.SendPropertyChanging();
					this._BeatNumber = value;
					this.SendPropertyChanged("BeatNumber");
					this.OnBeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateBy", DbType="VarChar(50)")]
		public string LastUpdateBy
		{
			get
			{
				return this._LastUpdateBy;
			}
			set
			{
				if ((this._LastUpdateBy != value))
				{
					this.OnLastUpdateByChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateBy = value;
					this.SendPropertyChanged("LastUpdateBy");
					this.OnLastUpdateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTemporary", DbType="Bit")]
		public System.Nullable<bool> IsTemporary
		{
			get
			{
				return this._IsTemporary;
			}
			set
			{
				if ((this._IsTemporary != value))
				{
					this.OnIsTemporaryChanging(value);
					this.SendPropertyChanging();
					this._IsTemporary = value;
					this.SendPropertyChanged("IsTemporary");
					this.OnIsTemporaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatColor", DbType="VarChar(50)")]
		public string BeatColor
		{
			get
			{
				return this._BeatColor;
			}
			set
			{
				if ((this._BeatColor != value))
				{
					this.OnBeatColorChanging(value);
					this.SendPropertyChanging();
					this._BeatColor = value;
					this.SendPropertyChanged("BeatColor");
					this.OnBeatColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetDailySchedulesResult
	{
		
		private string _beatnumber;
		
		private string _ScheduleName;
		
		private string _ScheduleTimeTable;
		
		private string _Supervisor;
		
		private string _PhoneNumber;
		
		private string _CellPhone;
		
		private string _ContractCompanyName;
		
		private string _Weekday;
		
		public GetDailySchedulesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_beatnumber", DbType="VarChar(51) NOT NULL", CanBeNull=false)]
		public string beatnumber
		{
			get
			{
				return this._beatnumber;
			}
			set
			{
				if ((this._beatnumber != value))
				{
					this._beatnumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleName", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string ScheduleName
		{
			get
			{
				return this._ScheduleName;
			}
			set
			{
				if ((this._ScheduleName != value))
				{
					this._ScheduleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleTimeTable", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string ScheduleTimeTable
		{
			get
			{
				return this._ScheduleTimeTable;
			}
			set
			{
				if ((this._ScheduleTimeTable != value))
				{
					this._ScheduleTimeTable = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supervisor", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string Supervisor
		{
			get
			{
				return this._Supervisor;
			}
			set
			{
				if ((this._Supervisor != value))
				{
					this._Supervisor = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this._PhoneNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this._CellPhone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractCompanyName", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string ContractCompanyName
		{
			get
			{
				return this._ContractCompanyName;
			}
			set
			{
				if ((this._ContractCompanyName != value))
				{
					this._ContractCompanyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weekday", DbType="VarChar(1) NOT NULL", CanBeNull=false)]
		public string Weekday
		{
			get
			{
				return this._Weekday;
			}
			set
			{
				if ((this._Weekday != value))
				{
					this._Weekday = value;
				}
			}
		}
	}
	
	public partial class GetEarlyRollInReportResult
	{
		
		private string _BeatNumber;
		
		private string _Truck_Number;
		
		private string _LastName;
		
		private string _FirstName;
		
		private System.DateTime _DateStamp;
		
		private string _Explanation;
		
		private string _CHPLogNumber;
		
		private string _Exception_Type;
		
		public GetEarlyRollInReportResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeatNumber", DbType="VarChar(50)")]
		public string BeatNumber
		{
			get
			{
				return this._BeatNumber;
			}
			set
			{
				if ((this._BeatNumber != value))
				{
					this._BeatNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Truck Number]", Storage="_Truck_Number", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Truck_Number
		{
			get
			{
				return this._Truck_Number;
			}
			set
			{
				if ((this._Truck_Number != value))
				{
					this._Truck_Number = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStamp", DbType="DateTime NOT NULL")]
		public System.DateTime DateStamp
		{
			get
			{
				return this._DateStamp;
			}
			set
			{
				if ((this._DateStamp != value))
				{
					this._DateStamp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Explanation", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Explanation
		{
			get
			{
				return this._Explanation;
			}
			set
			{
				if ((this._Explanation != value))
				{
					this._Explanation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHPLogNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CHPLogNumber
		{
			get
			{
				return this._CHPLogNumber;
			}
			set
			{
				if ((this._CHPLogNumber != value))
				{
					this._CHPLogNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Exception Type]", Storage="_Exception_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Exception_Type
		{
			get
			{
				return this._Exception_Type;
			}
			set
			{
				if ((this._Exception_Type != value))
				{
					this._Exception_Type = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
