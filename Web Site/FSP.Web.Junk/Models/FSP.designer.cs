#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FSP.Web.Junk.Models
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using System.ComponentModel.DataAnnotations;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "fsp")]
    public partial class FSPDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertIncidentType(IncidentType instance);
        partial void UpdateIncidentType(IncidentType instance);
        partial void DeleteIncidentType(IncidentType instance);
        #endregion

        public FSPDataContext() :
            base(global::System.Configuration.ConfigurationManager.ConnectionStrings["fspConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public FSPDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public FSPDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public FSPDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public FSPDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<IncidentType> IncidentTypes
        {
            get
            {
                return this.GetTable<IncidentType>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.IncidentTypes")]
    public partial class IncidentType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private System.Guid _IncidentTypeID;

       
        private string _IncidentTypeCode;

        
        private string _IncidentType1;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIncidentTypeIDChanging(System.Guid value);
        partial void OnIncidentTypeIDChanged();
        partial void OnIncidentTypeCodeChanging(string value);
        partial void OnIncidentTypeCodeChanged();
        partial void OnIncidentType1Changing(string value);
        partial void OnIncidentType1Changed();
        #endregion

        public IncidentType()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IncidentTypeID", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public System.Guid IncidentTypeID
        {
            get
            {
                return this._IncidentTypeID;
            }
            set
            {
                if ((this._IncidentTypeID != value))
                {
                    this.OnIncidentTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._IncidentTypeID = value;
                    this.SendPropertyChanged("IncidentTypeID");
                    this.OnIncidentTypeIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_IncidentTypeCode", DbType = "VarChar(10) NOT NULL", CanBeNull = false)]
        [Required]
        public string IncidentTypeCode
        {
            get
            {
                return this._IncidentTypeCode;
            }
            set
            {
                if ((this._IncidentTypeCode != value))
                {
                    this.OnIncidentTypeCodeChanging(value);
                    this.SendPropertyChanging();
                    this._IncidentTypeCode = value;
                    this.SendPropertyChanged("IncidentTypeCode");
                    this.OnIncidentTypeCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "IncidentType", Storage = "_IncidentType1", DbType = "VarChar(100) NOT NULL", CanBeNull = false)]
        [Required]
        public string IncidentType1
        {
            get
            {
                return this._IncidentType1;
            }
            set
            {
                if ((this._IncidentType1 != value))
                {
                    this.OnIncidentType1Changing(value);
                    this.SendPropertyChanging();
                    this._IncidentType1 = value;
                    this.SendPropertyChanged("IncidentType1");
                    this.OnIncidentType1Changed();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
#pragma warning restore 1591
